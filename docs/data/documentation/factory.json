{"topicSections":[{"title":"The Basics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"]},{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]},{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"title":"Additional Topics"},{"title":"Classes","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"]},{"title":"Protocols","identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]},{"title":"Structures","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"],"title":"Functions"},{"title":"Type Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"]},{"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"kind":"symbol","hierarchy":{"paths":[[]]},"metadata":{"title":"Factory","externalID":"Factory","modules":[{"name":"Factory"}],"role":"collection","roleHeading":"Framework","symbolKind":"module"},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Factory is…"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Adaptable"}]},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Powerful","type":"text"}]},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"text":"Performant","type":"text"}]},{"text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Safe","type":"text"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Concise"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Lightweight"}],"type":"strong"},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Tested","type":"text"}],"type":"strong"},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Free"}],"type":"strong"},{"text":": Factory is free and open source under the MIT License.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"Ready to get started?","type":"text"}]}]}],"references":{"doc://Factory/documentation/Factory/Scopes":{"role":"collectionGroup","url":"\/documentation\/factory\/scopes","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"kind":"article","title":"Scopes","type":"topic"},"doc://Factory/documentation/Factory/Functional":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","title":"Functional Injection"},"doc://Factory/documentation/Factory/ParameterFactory":{"url":"\/documentation\/factory\/parameterfactory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}]},"doc://Factory/documentation/Factory/FactoryContainer":{"navigatorTitle":[{"text":"FactoryContainer","kind":"identifier"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContainer","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"FactoryContainer","url":"\/documentation\/factory\/factorycontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","abstract":[]},"doc://Factory/documentation/Factory/FactoryResolving":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","role":"symbol","type":"topic","url":"\/documentation\/factory\/factoryresolving","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryResolving","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"abstract":[],"title":"FactoryResolving"},"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","title":"Factory","url":"\/documentation\/factory\/factory","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}]},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"url":"\/documentation\/factory\/factoryautoregistering","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"FactoryAutoRegistering","kind":"identifier"}],"navigatorTitle":[{"text":"FactoryAutoRegistering","kind":"identifier"}],"title":"FactoryAutoRegistering","type":"topic","role":"symbol","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/Previews":{"type":"topic","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","role":"article","url":"\/documentation\/factory\/previews","title":"SwiftUI Previews","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"doc://Factory/documentation/Factory/Debugging":{"url":"\/documentation\/factory\/debugging","role":"article","title":"Debugging","abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging"},"doc://Factory/documentation/Factory/FactoryContextType":{"url":"\/documentation\/factory\/factorycontexttype","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryContextType","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","title":"FactoryContextType","navigatorTitle":[{"text":"FactoryContextType","kind":"identifier"}],"abstract":[{"text":"Context types available for special purpose factory registrations.","type":"text"}]},"doc://Factory/documentation/Factory/Modules":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","title":"Modular Development","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"title":"Getting Started","type":"topic","url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article"},"doc://Factory/documentation/Factory/Testing":{"role":"article","abstract":[{"text":"Using Factory for Unit and UI Testing.","type":"text"}],"title":"Testing","type":"topic","url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","kind":"article"},"doc://Factory/documentation/Factory/Migration":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","type":"topic","kind":"article","url":"\/documentation\/factory\/migration","abstract":[{"text":"Moving from 1.x to 2.0","type":"text"}],"role":"article","title":"Migration"},"doc://Factory/documentation/Factory/Chains":{"url":"\/documentation\/factory\/chains","role":"article","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}],"title":"Circular Dependency Chains","kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains"},"doc://Factory/documentation/Factory/SharedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","role":"symbol","title":"SharedContainer","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","role":"symbol","title":"ManagedContainer","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"url":"\/documentation\/factory\/weaklazyinjected","kind":"symbol","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"title":"WeakLazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}]},"doc://Factory/documentation/Factory/AutoRegistering":{"navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"type":"topic","abstract":[{"text":"Adds an registration “hook” to a ","type":"text"},{"code":"Container","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/autoregistering","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","title":"AutoRegistering","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}]},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7Factory9ContainerC","text":"Container","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-52olu","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","title":"resolve(_:)"},"doc://Factory/documentation/Factory/InjectedType":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"type":"topic","title":"InjectedType","url":"\/documentation\/factory\/injectedtype","abstract":[{"text":"Basic property wrapper for optional injected types","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedType"}]},"doc://Factory/documentation/Factory/Tags":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","title":"Tags"},"doc://Factory/documentation/Factory/Containers":{"role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"title":"Containers","type":"topic","url":"\/documentation\/factory\/containers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","kind":"article"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactorySharedContainer","kind":"identifier"}],"role":"symbol","kind":"symbol","title":"FactorySharedContainer","url":"\/documentation\/factory\/factorysharedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","abstract":[]},"doc://Factory/documentation/Factory/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","type":"topic","url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://Factory/documentation/Factory/Injected":{"navigatorTitle":[{"text":"Injected","kind":"identifier"}],"url":"\/documentation\/factory\/injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"title":"Injected","type":"topic","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/InjectedObject":{"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InjectedObject","kind":"identifier"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobject","type":"topic","title":"InjectedObject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject"},"doc://Factory/documentation/Factory/Resolving":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factory\/resolving","abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"title":"Resolving","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}]},"doc://Factory/documentation/Factory/Optionals":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","title":"Optionals and Dynamic Registration"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","url":"\/documentation\/factory\/resolve(_:)-632zk","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"resolve","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"resolve(_:)","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Reset options for Factory’s and Container’s"}],"kind":"symbol","title":"FactoryResetOptions","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"FactoryResetOptions","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresetoptions"},"doc://Factory/documentation/Factory/FactoryScope":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","role":"symbol","title":"FactoryScope","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"FactoryScope","kind":"identifier"}],"url":"\/documentation\/factory\/factoryscope","navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryRegistration":{"kind":"symbol","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"navigatorTitle":[{"text":"FactoryRegistration","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FactoryRegistration","kind":"identifier"}],"url":"\/documentation\/factory\/factoryregistration","type":"topic","role":"symbol","title":"FactoryRegistration"},"doc://Factory/documentation/Factory/ContainerManager":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"type":"topic","title":"ContainerManager","url":"\/documentation\/factory\/containermanager","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}]},"doc://Factory/documentation/Factory/Design":{"type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","role":"article"},"doc://Factory/documentation/Factory/Container":{"url":"\/documentation\/factory\/container","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"title":"Container","kind":"symbol","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/FactoryContext":{"title":"FactoryContext","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","role":"symbol","navigatorTitle":[{"text":"FactoryContext","kind":"identifier"}],"abstract":[],"kind":"symbol","url":"\/documentation\/factory\/factorycontext","type":"topic"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","url":"\/documentation\/factory\/factorycontainermanager","abstract":[],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"FactoryContainerManager","kind":"identifier"}],"role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}],"title":"FactoryContainerManager"},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}],"title":"FactoryManagedContainer","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryManagedContainer","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","url":"\/documentation\/factory\/factorymanagedcontainer","type":"topic","abstract":[],"kind":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"kind":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","url":"\/documentation\/factory\/contexts","title":"Contexts","role":"article","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}]},"doc://Factory/documentation/Factory/LazyInjected":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyInjected","kind":"identifier"}],"abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","role":"symbol","title":"LazyInjected","kind":"symbol","url":"\/documentation\/factory\/lazyinjected","type":"topic","navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}]}}}