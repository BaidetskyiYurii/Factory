{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Adaptable"}],"type":"strong"},{"type":"text","text":": Factory doesn’t tie you down to a single dependency injection strategy or technique."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Powerful"}],"type":"strong"},{"text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Performant"}]},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Safe"}],"type":"strong"},{"text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Concise"}],"type":"strong"},{"text":": Defining a registration usually takes just a single line of code. Same for resolution.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Flexible","type":"text"}]},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Documented"}]},{"text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Lightweight","type":"text"}],"type":"strong"},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Tested","type":"text"}]},{"type":"text","text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Free"}],"type":"strong"},{"type":"text","text":": Factory is free and open source under the MIT License."}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"title":"The Basics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"title":"Development and Testing"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics"},{"title":"Additional Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"]},{"title":"Classes","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"title":"Protocols"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"title":"Structures"},{"title":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"]},{"title":"Type Aliases","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"]},{"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"hierarchy":{"paths":[[]]},"kind":"symbol","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"sections":[],"metadata":{"symbolKind":"module","roleHeading":"Framework","role":"collection","modules":[{"name":"Factory"}],"title":"Factory","externalID":"Factory"},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","url":"\/documentation\/factory\/resolve(_:)-52olu","title":"resolve(_:)","type":"topic","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"Container","kind":"typeIdentifier","preciseIdentifier":"s:7Factory9ContainerC"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">>) -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/FactoryContext":{"abstract":[],"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContext"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","title":"FactoryContext","navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"url":"\/documentation\/factory\/factorycontext","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"abstract":[{"text":"Global function to resolve a keypath on the specified shared container into the requested type","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-632zk","role":"symbol","title":"resolve(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"},"doc://Factory/documentation/Factory/Scopes":{"title":"Scopes","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}]},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"title":"WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryResetOptions":{"title":"FactoryResetOptions","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","role":"symbol","type":"topic","navigatorTitle":[{"text":"FactoryResetOptions","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResetOptions"}],"url":"\/documentation\/factory\/factoryresetoptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Contexts":{"url":"\/documentation\/factory\/contexts","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}]},"doc://Factory/documentation/Factory/Containers":{"kind":"article","type":"topic","title":"Containers","url":"\/documentation\/factory\/containers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}]},"doc://Factory/documentation/Factory/Tags":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","kind":"article","role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"url":"\/documentation\/factory\/tags","title":"Tags","type":"topic"},"doc://Factory/documentation/Factory/Migration":{"kind":"article","type":"topic","title":"Migration","url":"\/documentation\/factory\/migration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","role":"article","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}]},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","type":"topic"},"doc://Factory/documentation/Factory/Previews":{"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","url":"\/documentation\/factory\/previews","role":"article","type":"topic","title":"SwiftUI Previews"},"doc://Factory/documentation/Factory/SharedContainer":{"url":"\/documentation\/factory\/sharedcontainer","type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"title":"Factory","url":"\/documentation\/factory\/factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/LazyInjected":{"type":"topic","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","url":"\/documentation\/factory\/lazyinjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/AutoRegistering":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoRegistering","kind":"identifier"}],"kind":"symbol","type":"topic","title":"AutoRegistering","url":"\/documentation\/factory\/autoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","role":"symbol","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"."}]},"doc://Factory/documentation/Factory/FactoryRegistration":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryRegistration"}],"abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"kind":"symbol","type":"topic","url":"\/documentation\/factory\/factoryregistration","role":"symbol","title":"FactoryRegistration","navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration"},"doc://Factory/documentation/Factory/FactoryContainer":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContainer"}],"kind":"symbol","type":"topic","title":"FactoryContainer","url":"\/documentation\/factory\/factorycontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","role":"symbol","navigatorTitle":[{"text":"FactoryContainer","kind":"identifier"}],"abstract":[]},"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","url":"\/documentation\/factory\/debugging","role":"article","type":"topic","title":"Debugging"},"doc://Factory/documentation/Factory/InjectedType":{"title":"InjectedType","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"InjectedType","kind":"identifier"}],"url":"\/documentation\/factory\/injectedtype","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}]},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryManagedContainer"}],"kind":"symbol","type":"topic","title":"FactoryManagedContainer","url":"\/documentation\/factory\/factorymanagedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","role":"symbol","navigatorTitle":[{"text":"FactoryManagedContainer","kind":"identifier"}],"abstract":[]},"doc://Factory/documentation/Factory/FactoryResolving":{"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResolving"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryResolving"}],"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","url":"\/documentation\/factory\/factoryresolving","role":"symbol","abstract":[],"title":"FactoryResolving"},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"navigatorTitle":[{"kind":"identifier","text":"FactoryAutoRegistering"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","kind":"symbol","abstract":[],"role":"symbol","title":"FactoryAutoRegistering","url":"\/documentation\/factory\/factoryautoregistering","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryAutoRegistering","kind":"identifier"}]},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","kind":"article","role":"article","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"type":"topic"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactorySharedContainer"}],"kind":"symbol","type":"topic","title":"FactorySharedContainer","url":"\/documentation\/factory\/factorysharedcontainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","role":"symbol","navigatorTitle":[{"text":"FactorySharedContainer","kind":"identifier"}],"abstract":[]},"doc://Factory/documentation/Factory/Injected":{"navigatorTitle":[{"text":"Injected","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","kind":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"role":"symbol","title":"Injected","url":"\/documentation\/factory\/injected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}]},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","type":"topic","title":"Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"url":"\/documentation\/factory\/container","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryScope":{"title":"FactoryScope","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","role":"symbol","type":"topic","navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryScope"}],"url":"\/documentation\/factory\/factoryscope","abstract":[],"kind":"symbol"},"doc://Factory/documentation/Factory/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","type":"topic","title":"Testing"},"doc://Factory/documentation/Factory/ManagedContainer":{"url":"\/documentation\/factory\/managedcontainer","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","title":"ManagedContainer"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","role":"article"},"doc://Factory/documentation/Factory/Chains":{"kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","role":"article","type":"topic","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}]},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factory\/injectedobject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","title":"InjectedObject","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}]},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}],"url":"\/documentation\/factory\/resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}]},"doc://Factory/documentation/Factory/ContainerManager":{"title":"ContainerManager","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ContainerManager","kind":"identifier"}],"url":"\/documentation\/factory\/containermanager","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}]},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","kind":"article","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"url":"\/documentation\/factory\/modules","title":"Modular Development","type":"topic"},"doc://Factory/documentation/Factory/FactoryContextType":{"role":"symbol","url":"\/documentation\/factory\/factorycontexttype","title":"FactoryContextType","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryContextType"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory":{"title":"ParameterFactory","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}]},"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","kind":"article","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"url":"\/documentation\/factory\/functional","title":"Functional Injection","type":"topic"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/DynamicInjected":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicInjected"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","kind":"symbol","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"title":"DynamicInjected","role":"symbol","url":"\/documentation\/factory\/dynamicinjected"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"kind":"symbol"},"doc://Factory/documentation/Factory/FactoryContainerManager":{"title":"FactoryContainerManager","url":"\/documentation\/factory\/factorycontainermanager","role":"symbol","type":"topic","abstract":[],"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryContainerManager"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}]},"doc://Factory/documentation/Factory/GettingStarted":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","type":"topic","kind":"article","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}],"url":"\/documentation\/factory\/gettingstarted","title":"Getting Started","role":"collectionGroup"}}}