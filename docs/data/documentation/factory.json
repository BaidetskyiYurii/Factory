{"abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"text":"Overview","anchor":"Overview"},{"inlineContent":[{"text":"Factory is strongly influenced by SwiftUI, and in my opinion is highly suited for use in that environment.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory is…"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Adaptable"}]},{"text":": Factory doesn’t tie you down to a single dependency injection strategy or technique.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Powerful","type":"text"}],"type":"strong"},{"type":"text","text":": Factory supports containers, scopes, passed parameters, contexts, decorators, unit tests, SwiftUI Previews, and much, much more."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Performant","type":"text"}],"type":"strong"},{"type":"text","text":": Little to no setup time is needed for the vast majority of your services, resolutions are extremely fast, and no compile-time scripts or build phases are needed."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Safe"}]},{"type":"text","text":": Factory is compile-time safe; a factory for a given type must exist or the code simply will not compile."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"text":"Concise","type":"text"}]},{"type":"text","text":": Defining a registration usually takes just a single line of code. Same for resolution."}]}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Flexible","type":"text"}],"type":"strong"},{"type":"text","text":": Working with UIKIt or SwiftUI? iOS or macOS? Using MVVM? MVP? Clean? VIPER? No problem. Factory works with all of these and more."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"text":"Documented","type":"text"}],"type":"strong"},{"type":"text","text":": Factory 2.0 has extensive DocC documentation and examples covering its classes, methods, and use cases."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Lightweight"}]},{"text":": With all of that Factory is slim and trim, under 800 lines of executable code.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"Tested"}]},{"text":": Unit tests with 100% code coverage helps ensure correct operation of registrations, resolutions, and scopes.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Free"}],"type":"strong"},{"text":": Factory is free and open source under the MIT License.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Ready to get started?"}]}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/GettingStarted","doc:\/\/Factory\/documentation\/Factory\/Containers","doc:\/\/Factory\/documentation\/Factory\/Scopes"],"title":"The Basics"},{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]},{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Migration"],"title":"Additional Topics"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/ContainerManager"],"title":"Classes"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"title":"Protocols"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory","doc:\/\/Factory\/documentation\/Factory\/FactoryContext","doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","doc:\/\/Factory\/documentation\/Factory\/Injected","doc:\/\/Factory\/documentation\/Factory\/InjectedObject","doc:\/\/Factory\/documentation\/Factory\/InjectedType","doc:\/\/Factory\/documentation\/Factory\/LazyInjected","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"],"title":"Structures"},{"title":"Functions","identifiers":["doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","doc:\/\/Factory\/documentation\/Factory\/FactoryScope","doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer"],"title":"Type Aliases"},{"title":"Enumerations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory"]}],"metadata":{"roleHeading":"Framework","title":"Factory","externalID":"Factory","symbolKind":"module","modules":[{"name":"Factory"}],"role":"collection"},"kind":"symbol","hierarchy":{"paths":[[]]},"references":{"doc://Factory/documentation/Factory/Modules":{"role":"article","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","url":"\/documentation\/factory\/modules","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/resolve(_:)-632zk":{"role":"symbol","abstract":[{"type":"text","text":"Global function to resolve a keypath on the specified shared container into the requested type"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":", "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">>) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"title":"resolve(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-632zk","kind":"symbol","url":"\/documentation\/factory\/resolve(_:)-632zk","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","type":"topic","title":"Factory Modifiers","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"url":"\/documentation\/factory\/modifiers","kind":"article","role":"article"},"doc://Factory/documentation/Factory/Debugging":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","url":"\/documentation\/factory\/debugging","title":"Debugging","role":"article","kind":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"type":"topic"},"doc://Factory/documentation/Factory/FactorySharedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactorySharedContainer","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"FactorySharedContainer","kind":"identifier"}],"abstract":[],"title":"FactorySharedContainer","navigatorTitle":[{"kind":"identifier","text":"FactorySharedContainer"}],"kind":"symbol","url":"\/documentation\/factory\/factorysharedcontainer","role":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryContainerManager":{"type":"topic","abstract":[],"title":"FactoryContainerManager","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryContainerManager","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainerManager","kind":"symbol","navigatorTitle":[{"text":"FactoryContainerManager","kind":"identifier"}],"url":"\/documentation\/factory\/factorycontainermanager"},"doc://Factory/documentation/Factory/FactoryContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContainer","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryContainer","kind":"identifier"}],"title":"FactoryContainer","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"FactoryContainer"}],"url":"\/documentation\/factory\/factorycontainer","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/Containers":{"kind":"article","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","title":"Containers","type":"topic","url":"\/documentation\/factory\/containers","role":"article"},"doc://Factory/documentation/Factory/FactoryResolving":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResolving","type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryResolving"}],"title":"FactoryResolving","abstract":[],"navigatorTitle":[{"text":"FactoryResolving","kind":"identifier"}],"url":"\/documentation\/factory\/factoryresolving","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory":{"kind":"symbol","abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}],"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","role":"symbol","type":"topic","url":"\/documentation\/factory\/parameterfactory"},"doc://Factory/documentation/Factory/Contexts":{"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/contexts","title":"Contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}]},"doc://Factory/documentation/Factory/Optionals":{"type":"topic","kind":"article","title":"Optionals and Dynamic Registration","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","url":"\/documentation\/factory\/optionals","role":"article"},"doc://Factory/documentation/Factory/Chains":{"title":"Circular Dependency Chains","kind":"article","url":"\/documentation\/factory\/chains","type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}]},"doc://Factory/documentation/Factory/FactoryScope":{"fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryScope","kind":"identifier"}],"abstract":[],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryScope","type":"topic","title":"FactoryScope","navigatorTitle":[{"text":"FactoryScope","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/factory\/factoryscope"},"doc://Factory/documentation/Factory/Functional":{"type":"topic","kind":"article","title":"Functional Injection","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"url":"\/documentation\/factory\/functional","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","role":"article"},"doc://Factory/documentation/Factory/InjectedType":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedType","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"InjectedType"}],"abstract":[{"type":"text","text":"Basic property wrapper for optional injected types"}],"title":"InjectedType","navigatorTitle":[{"kind":"identifier","text":"InjectedType"}],"kind":"symbol","url":"\/documentation\/factory\/injectedtype","role":"symbol"},"doc://Factory/documentation/Factory/GettingStarted":{"type":"topic","title":"Getting Started","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","url":"\/documentation\/factory\/gettingstarted","role":"collectionGroup"},"doc://Factory/documentation/Factory/Migration":{"title":"Migration","kind":"article","url":"\/documentation\/factory\/migration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Migration","role":"article","type":"topic","abstract":[{"type":"text","text":"Moving from 1.x to 2.0"}]},"doc://Factory/documentation/Factory/Testing":{"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/testing","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}]},"doc://Factory/documentation/Factory/FactoryContext":{"navigatorTitle":[{"kind":"identifier","text":"FactoryContext"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContext","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryContext"}],"kind":"symbol","type":"topic","title":"FactoryContext","url":"\/documentation\/factory\/factorycontext","role":"symbol"},"doc://Factory/documentation/Factory/resolve(_:)-52olu":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/resolve(_:)-52olu","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory9ContainerC","text":"Container"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"kind":"typeIdentifier","text":"T"}],"title":"resolve(_:)","abstract":[{"text":"Global function to resolve a keypath on Container.shared into the requested type","type":"text"}],"url":"\/documentation\/factory\/resolve(_:)-52olu","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/weaklazyinjected","navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"title":"WeakLazyInjected","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WeakLazyInjected"}]},"doc://Factory/documentation/Factory/Previews":{"title":"SwiftUI Previews","kind":"article","url":"\/documentation\/factory\/previews","type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","abstract":[{"text":"Mocking dependencies for SwiftUI Previews.","type":"text"}]},"doc://Factory/documentation/Factory/AutoRegistering":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"AutoRegistering","kind":"identifier"}],"type":"topic","role":"symbol","title":"AutoRegistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/AutoRegistering","navigatorTitle":[{"text":"AutoRegistering","kind":"identifier"}],"abstract":[{"type":"text","text":"Adds an registration “hook” to a "},{"code":"Container","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/factory\/autoregistering","kind":"symbol"},"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobject","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","role":"symbol","title":"InjectedObject"},"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/LazyInjected":{"type":"topic","navigatorTitle":[{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","url":"\/documentation\/factory\/lazyinjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LazyInjected"}]},"doc://Factory/documentation/Factory/Factory":{"role":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"url":"\/documentation\/factory\/factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"title":"Factory","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"doc://Factory/documentation/Factory/Tags":{"role":"article","title":"Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","url":"\/documentation\/factory\/cycle","role":"article"},"doc://Factory/documentation/Factory/Design":{"type":"topic","kind":"article","title":"Designing Factory","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","role":"article"},"doc://Factory/documentation/Factory/FactoryResetOptions":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryResetOptions"}],"title":"FactoryResetOptions","abstract":[{"text":"Reset options for Factory’s and Container’s","type":"text"}],"kind":"symbol","url":"\/documentation\/factory\/factoryresetoptions","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryResetOptions","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"FactoryResetOptions"}]},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"title":"ManagedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","role":"symbol","type":"topic","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}]},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factory\/factorymodifying"},"doc://Factory/documentation/Factory/ContainerManager":{"navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ContainerManager"}],"kind":"symbol","url":"\/documentation\/factory\/containermanager","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","title":"ContainerManager","abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"role":"symbol","type":"topic"},"doc://Factory/documentation/Factory/Injected":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/injected","navigatorTitle":[{"kind":"identifier","text":"Injected"}],"title":"Injected","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves an instance of the desired type."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryManagedContainer":{"title":"FactoryManagedContainer","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryManagedContainer","role":"symbol","url":"\/documentation\/factory\/factorymanagedcontainer","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FactoryManagedContainer"}],"navigatorTitle":[{"kind":"identifier","text":"FactoryManagedContainer"}]},"doc://Factory/documentation/Factory/FactoryContextType":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/factorycontexttype","navigatorTitle":[{"kind":"identifier","text":"FactoryContextType"}],"title":"FactoryContextType","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryContextType","abstract":[{"type":"text","text":"Context types available for special purpose factory registrations."}],"fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"text":"FactoryContextType","kind":"identifier"}]},"doc://Factory/documentation/Factory/FactoryAutoRegistering":{"url":"\/documentation\/factory\/factoryautoregistering","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryAutoRegistering","kind":"symbol","type":"topic","navigatorTitle":[{"text":"FactoryAutoRegistering","kind":"identifier"}],"title":"FactoryAutoRegistering","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryAutoRegistering","kind":"identifier"}],"role":"symbol","abstract":[]},"doc://Factory/documentation/Factory/Scopes":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","title":"Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"url":"\/documentation\/factory\/scopes","kind":"article","role":"collectionGroup"},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"title":"Container","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"url":"\/documentation\/factory\/container"},"doc://Factory/documentation/Factory/FactoryRegistration":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryRegistration","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"FactoryRegistration","kind":"identifier"}],"title":"FactoryRegistration","abstract":[{"type":"text","text":"Shared registration type for Factory and ParameterFactory. Used internally to manage the registration and resolution process."}],"navigatorTitle":[{"kind":"identifier","text":"FactoryRegistration"}],"url":"\/documentation\/factory\/factoryregistration","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/Resolving":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/resolving","abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","title":"Resolving"}}}