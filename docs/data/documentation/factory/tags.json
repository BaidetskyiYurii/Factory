{"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some dependency injection systems offer functionality known as tagging. Once tagged, you can ask the system for a list of all registered dependencies that conform to that tag."}]},{"syntax":"swift","type":"codeListing","code":["let processors = container.resolve(tagged: \"processor\")"]},{"type":"paragraph","inlineContent":[{"text":"Sometimes the tag is explicitly defined during the registration process, like .tag(“processors”). In other systems, you might ask the system for everything registered that conforms to a specific type.","type":"text"}]},{"syntax":"swift","code":["let processors = container.resolve(Processing.self)"],"type":"codeListing"},{"inlineContent":[{"text":"Doing this sort of thing in Factory is somewhat problematic, in that in most cases for most instances there ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"isn’t","type":"text"}]},{"text":" a registration phase. Factory’s are lazy creatures, and they’re not evaluated until the Factory is requested.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"So what can we do?","type":"text"}]},{"type":"heading","level":2,"anchor":"Simple-Solution","text":"Simple Solution"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following Factory registrations."}]},{"code":["extension SharedContainer {","    var processor1: Factory<Processor> { self { Processor1() } }","    var processor2: Factory<Processor> { self { Processor2() } }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now the following container extension added to our main application."}]},{"code":["extension Container {","    public static var processors: [KeyPath<Container, Factory<Processor>>] = [","        \\.processor1,","        \\.processor2,","    ]","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we build a simple list of keyPaths that defines all known processors. As discussed in multiple module support, the root application should know what systems are available to it."}]},{"inlineContent":[{"type":"text","text":"Once that’s done, accomplishing the lookup and getting the list of actual processors is a piece of cake."}],"type":"paragraph"},{"code":["extension Container {","    public func processors() -> [Processor] {","        Container.processors.map { self[keyPath: $0]() }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And since the keyPath definition guarantees the type of the object, the array will also be type safe, something that can be difficult to accomplish with simple string-based tagging systems."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But we can do more.","type":"text"}]},{"anchor":"Appending-New-Processors","level":2,"type":"heading","text":"Appending New Processors"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First, note that anything could be added to the array at any point in time."}]},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors.append(\\.processor3)","    }","    var processor3: Factory<Processor> { self { Processor3() } }","}"]},{"type":"heading","text":"Multiple Modules and Anonymous Processors","level":2,"anchor":"Multiple-Modules-and-Anonymous-Processors"},{"type":"paragraph","inlineContent":[{"text":"Above we mentioned that that main app should know what processors are available to it. That said, sometime you may not.","type":"text"}]},{"inlineContent":[{"text":"In that case you could ask a set of modules for their own, anonymous contributions.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container: AutoRegistering {","    func autoRegister() {","        Container.processors += ModuleA.availableProcessors()","        Container.processors += ModuleB.availableProcessors()","        Container.processors += ModuleC.availableProcessors()","    }","}"]},{"anchor":"Priority","text":"Priority","type":"heading","level":2},{"inlineContent":[{"text":"The basic solution can obviously be expanded as needed, perhaps by creating a struct that allows for tag priority.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Tag<T> {","    let path: KeyPath<Container, Factory<T>>","    let priority: Int","}","","extension Container {","    static var processors: [Tag<Processor>] = [","        Tag(path: \\.processor1, priority: 20),","        Tag(path: \\.processor2, priority: 10),","    ]","    func processors() -> [Processor] {","        Container.processors","            .sorted(by: { $0.priority < $1.priority })","            .map { self[keyPath: $0.path]() }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"While Factory doesn’t currently support tags out of the box, there are a lot of ways to roll your own solutions using the tools Factory provides.","type":"text"}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Tags","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"variants":[{"paths":["\/documentation\/factory\/tags"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"article","metadata":{"role":"article","roleHeading":"Article","modules":[{"name":"Factory"}],"title":"Tags"},"seeAlsoSections":[{"title":"Advanced Topics","generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Functional"]}],"sections":[],"references":{"doc://Factory/documentation/Factory/Modules":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","title":"Modular Development","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic"},"doc://Factory/documentation/Factory/Design":{"type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","role":"article"},"doc://Factory/documentation/Factory/Functional":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/functional","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","title":"Functional Injection"},"doc://Factory/documentation/Factory/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","type":"topic","url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article"},"doc://Factory/documentation/Factory/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/Optionals":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","title":"Optionals and Dynamic Registration"}}}