{"variants":[{"paths":["\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":" = "},{"text":"#function","kind":"keyword"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"syntax":"swift","code":["extension Container {","    public var accountLoader: Factory<AccountLoading?> { promised() }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When run in debug mode and the application attempts to resolve an unregistered accountLoader, ","type":"text"},{"code":"promised()","type":"codeVoice"},{"type":"text","text":" will trigger a fatalError to"},{"text":" ","type":"text"},{"type":"text","text":"inform you of the mistake. But in a released application, "},{"type":"codeVoice","code":"promised()"},{"text":" simply returns nil and your application can continue on.","type":"text"}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer"]]},"metadata":{"modules":[{"name":"Factory"}],"externalID":"s:7Factory16ManagedContainerPAAE8promised3keyA2AVyqd__SgGs12StaticStringV_tlF","extendedModule":"Factory","title":"promised(key:)","roleHeading":"Instance Method","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}]},"sections":[],"abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","title":"Factory","url":"\/documentation\/factory\/factory","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}]},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","role":"symbol","title":"ManagedContainer","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-1ucr5":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5","role":"symbol","title":"promised(key:)","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"kind":"symbol"}}}