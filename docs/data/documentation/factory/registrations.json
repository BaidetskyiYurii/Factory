{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Factory"}],"title":"Sample Registrations"},"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"seeAlsoSections":[{"generated":true,"title":"Examples","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolutions"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Registrations","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":3,"anchor":"Basic","text":"Basic"},{"inlineContent":[{"type":"text","text":"Example of a basic dependency registration in a Factory 2.0 container."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var service: Factory<MyServiceType> {","        self { MyService() }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This registered dependency returns a new, unique version of "},{"type":"codeVoice","code":"MyServiceType"},{"type":"text","text":" whenever it’s asked to do so."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also go ahead and use the full, formal definition, constructing the Factory yourself and passing it a reference to its enclosing container."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<MyServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"We prefer the more concise version, and that’s what we’ll use going forward."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The container helper functions are "},{"type":"codeVoice","code":"@inlinable"},{"text":" and as such there’s no performance penalty incurred when calling them.","type":"text"}]}],"type":"aside","style":"note","name":"Note"},{"level":3,"type":"heading","text":"Scopes","anchor":"Scopes"},{"inlineContent":[{"type":"text","text":"Examples of defining scoped services in a Factory 2.0 container."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    var standardService: Factory<MyServiceType> {","        self { MyService() }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }","            .cached","    }","    var singletonService: Factory<SimpleService> {","        self { SimpleService() }","            .singleton","    }","    var sharedService: Factory<MyServiceType> {","        self { MyService() }","            .shared","            .decorator { print(\"DECORATING \\($0.id)\") }","    }","    var customScopedService: Factory<SimpleService> {","        self { SimpleService() }","            .scope(.session)","    }","}"],"type":"codeListing"},{"text":"Constructor Injection","level":3,"type":"heading","anchor":"Constructor-Injection"},{"inlineContent":[{"text":"Example of service with constructor injection that requires another service as a parameter. To obtain that dependency we simply ask the Factory dedicated to that service to provide one for us.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}"],"syntax":"swift"},{"text":"Parameters","anchor":"Parameters","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, ParameterService> {","        self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Note that we also needed to specify the type of our parameter.","type":"text"}],"type":"paragraph"},{"anchor":"Same-Types","level":3,"text":"Same Types","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Example of correctly handling multiple instances of the same type.","type":"text"}]},{"syntax":"swift","code":["extension Container {","    var string1: Factory<String> {","        self { \"String 1\" }","    }","    var string2: Factory<String> {","        self { \"String 2\" }","    }","    var string3: Factory<String> {","        self { \"String 3\" }","    }","    var string4: Factory<String> {","        self { \"String 4\" }","    }","}"],"type":"codeListing"},{"anchor":"Inside-Custom-Containers","type":"heading","text":"Inside Custom Containers","level":3},{"inlineContent":[{"type":"text","text":"You’ve seen factory registrations done within container "},{"type":"emphasis","inlineContent":[{"type":"text","text":"extensions"}]},{"text":", but it should also be noted that we can also create them within our own custom containers.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["final class ServiceContainer: SharedContainer {","    \/\/ CONFORMANCE","    static var shared = ServiceContainer()","    var manager = ContainerManager()","    ","    \/\/ DEFINE FACTORY","    var service1: Factory<MyServiceType> {","        self { MyService() }","    }","","    \/\/ DON'T DO THIS","    lazy var service2: Factory<MyServiceType> = self {","        MyService()","    }","}"]},{"inlineContent":[{"type":"text","text":"Note the last “lazy” definition of "},{"code":"service2","type":"codeVoice"},{"type":"text","text":". This may seem like a reasonable equivalent, but it hides a fatal flaw. Factories are designed to be transient. They’re lightweight structs created to do a job and then they’re discarded."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In order to accomplish this task, each Factory that’s created needs to maintain a strong reference to its enclosing container. And now you should be able to see the problem."}],"type":"paragraph"},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"Creating a “lazy” Factory and assigning it to it’s enclosing class will create a reference cycle.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"Should you attempt to release such a container it will never go away, and you’ll have a memory leak on your hands."}],"type":"paragraph"},{"type":"heading","anchor":"Static-Factorys","text":"Static Factory’s","level":3},{"inlineContent":[{"type":"text","text":"Example of a static Factory 2.0 registration container."}],"type":"paragraph"},{"syntax":"swift","code":["extension Container {","    static var oldSchool: Factory<School> {","        Factory(shared) { School() }","    }","}","","let school = Container.oldSchool"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that we referenced the class “shared” container. That container will manage the registrations and scopes for our Factory."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While you "},{"inlineContent":[{"text":"can","type":"text"}],"type":"emphasis"},{"type":"text","text":" create static Factory’s in this manner, such usage should be considered to be deprecated. Static factories are also no longer compatible with the various "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true},{"text":" property wrappers due to the lack of keyPaths.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Better to simply define the Factory as a standard computed variable within a Container, and then access the “shared” version."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var newSchool: Factory<School> {","        self { School() }","    }","}","","let school = Container.shared.newSchool"]}]}],"kind":"article","schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/factory\/registrations"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://Factory/documentation/Factory/Injected":{"navigatorTitle":[{"text":"Injected","kind":"identifier"}],"url":"\/documentation\/factory\/injected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Injected","kind":"identifier"}],"title":"Injected","type":"topic","kind":"symbol","role":"symbol"},"doc://Factory/documentation/Factory/GettingStarted":{"role":"collectionGroup","abstract":[{"type":"text","text":"Defining a Factory, resolving it, and changing the default behavior."}],"title":"Getting Started","type":"topic","url":"\/documentation\/factory\/gettingstarted","identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","kind":"article"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory":{"url":"\/documentation\/factory\/parameterfactory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}]},"doc://Factory/documentation/Factory/Resolutions":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolutions","kind":"article","role":"article","title":"Sample Resolutions","abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"url":"\/documentation\/factory\/resolutions"}}}