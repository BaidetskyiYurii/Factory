{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Resolutions"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/GettingStarted"]]},"primaryContentSections":[{"content":[{"text":"Shared Class Container","type":"heading","anchor":"Shared-Class-Container","level":3},{"inlineContent":[{"type":"text","text":"Here we instantiate our dependency from a shared class container."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service = Container.shared.constructedService()","}"]},{"inlineContent":[{"text":"This is the classic Service Locator pattern updated for Factory 2.0.","type":"text"}],"type":"paragraph"},{"text":"Initialization from Passed Container","anchor":"Initialization-from-Passed-Container","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and initializing service from that container.","type":"text"}]},{"type":"codeListing","code":["class ContentViewModel: ObservableObject {","","    let service2: MyServiceType","","    init(container: Container) {","        service2 = container.service()","    }","    ","}"],"syntax":"swift"},{"text":"Lazy Initialization from Passed Container","type":"heading","level":3,"anchor":"Lazy-Initialization-from-Passed-Container"},{"type":"paragraph","inlineContent":[{"text":"Passing an instance of a container to our view model and saving it for later lazy initializers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    private let container: Container","","    private lazy var service3: MyConstructedService = container.constructedService()","    private lazy var service4: MyServiceType = container.cachedService()","    private lazy var service5: SimpleService = container.singletonService()","    private lazy var service6: MyServiceType = container.sharedService()","","    init(container: Container) {","        self.container = container","    }","","}"]},{"anchor":"Injected-Property-Wrappers","text":"Injected Property Wrappers","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Using the ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@LazyInjected"},{"type":"text","text":" property wrappers to obtain dependencies using an Annotation pattern similar to that used by "},{"code":"EnvironmentObject","type":"codeVoice"},{"text":" in SwiftUI.","type":"text"}]},{"code":["class ContentViewModel: ObservableObject {","","    \/\/ Injected property from default container","    @Injected(\\.constructedService) var constructed","","    \/\/ Injected property from custom container","    @Injected(\\MyContainer.anotherService) var anotherService","","    \/\/ LazyInjected property from custom container","    @LazyInjected(\\MyContainer.myLazyService) var myLazyService","","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One can also inject the view model itself."}]},{"code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model: ContentViewModel","    var body: some View {","        ...","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","isActive":true},{"text":", ","type":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","type":"reference","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","type":"reference"},{"type":"text","text":" for more."}]},{"type":"heading","level":3,"anchor":"Global-Keypath-Resolution-from-Shared-Container","text":"Global Keypath Resolution from Shared Container"},{"type":"paragraph","inlineContent":[{"text":"Factory provides two global functions that utilize keypaths for resolution.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ContentViewModel: ObservableObject {","    let service1 = resolve(\\.constructedService)","    let service2 = resolve(\\MyContainer.anotherService)","}"]},{"type":"paragraph","inlineContent":[{"text":"The end result is identical to using a keypath with the @Injected property wrapper.","type":"text"}]},{"anchor":"Parameterized-Initialization-from-Passed-Container","type":"heading","text":"Parameterized Initialization from Passed Container","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Passing a required parameter to a factory for resolution."}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel: ObservableObject {","","    let parameterService: ParameterService","","    init(container: Container, value: Int) {","        service2 = container.parameterService(value)","    }","","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","isActive":true},{"type":"text","text":" for more details."}]},{"text":"Classic Factory from Static Class Member","type":"heading","level":3,"anchor":"Classic-Factory-from-Static-Class-Member"},{"type":"paragraph","inlineContent":[{"text":"Initializing dependency from class. This is classic Service Locator pattern but this pattern should be consider deprecated.","type":"text"}]},{"code":["class ContentViewModel: ObservableObject {","    let newSchool = Container.newSchool()","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This was discussed in greater detail in ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","isActive":true}]},{"text":"Composition Root","type":"heading","level":3,"anchor":"Composition-Root"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use a Composition Root pattern, just use the container to provide the required dependencies to a constructor."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var constructedService: Factory<MyConstructedService> {","        self { MyConstructedService(service: self.cachedService()) }.singleton","    }","    var cachedService: Factory<MyServiceType> {","        self { MyService() }.cached","    }","}","","@main","struct FactoryDemoApp: App {","    let viewModel = MyViewModel(service: Container.shared.constructedService())","    var body: some Scene {","        WindowGroup {","            NavigationView {","                ContentView(viewModel: viewModel)","            }","        }","    }","}ÃŸ"]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/factory\/resolutions"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"There are many ways to use Factory to resolve dependencies. Here are a few examples.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Registrations"],"generated":true,"title":"Examples"}],"kind":"article","sections":[],"metadata":{"modules":[{"name":"Factory"}],"role":"article","title":"Sample Resolutions","roleHeading":"Article"},"references":{"doc://Factory/documentation/Factory/GettingStarted":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/GettingStarted","type":"topic","kind":"article","abstract":[{"text":"Defining a Factory, resolving it, and changing the default behavior.","type":"text"}],"url":"\/documentation\/factory\/gettingstarted","title":"Getting Started","role":"collectionGroup"},"doc://Factory/documentation/Factory/WeakLazyInjected":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","kind":"symbol","abstract":[{"type":"text","text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested."}],"title":"WeakLazyInjected","url":"\/documentation\/factory\/weaklazyinjected","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}],"navigatorTitle":[{"text":"WeakLazyInjected","kind":"identifier"}]},"doc://Factory/documentation/Factory/Injected":{"navigatorTitle":[{"text":"Injected","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Injected","kind":"symbol","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"role":"symbol","title":"Injected","url":"\/documentation\/factory\/injected","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Injected"}]},"doc://Factory/documentation/Factory/DynamicInjected":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DynamicInjected"}],"navigatorTitle":[{"text":"DynamicInjected","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/DynamicInjected","kind":"symbol","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type.","type":"text"}],"title":"DynamicInjected","role":"symbol","url":"\/documentation\/factory\/dynamicinjected"},"doc://Factory/documentation/Factory/Registrations":{"abstract":[{"type":"text","text":"There are many ways to register dependencies with Factory. Here are a few examples."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Registrations","title":"Sample Registrations","role":"article","url":"\/documentation\/factory\/registrations","kind":"article"},"doc://Factory/documentation/Factory/ParameterFactory":{"title":"ParameterFactory","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}],"url":"\/documentation\/factory\/parameterfactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}]},"doc://Factory/documentation/Factory/InjectedObject":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InjectedObject"}],"abstract":[{"type":"text","text":"Immediate injection property wrapper for SwiftUI ObservableObjects."}],"url":"\/documentation\/factory\/injectedobject","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","title":"InjectedObject","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}]},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"type":"topic","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","url":"\/documentation\/factory\/lazyinjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol"}}}