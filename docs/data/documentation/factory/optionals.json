{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/optionals"]}],"metadata":{"modules":[{"name":"Factory"}],"role":"article","title":"Optionals and Dynamic Registration","roleHeading":"Article"},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Optionals"},"kind":"article","sections":[],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics"}],"primaryContentSections":[{"content":[{"anchor":"Overview","level":2,"type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Optional Factory definitions have several uses, including:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Dynamic Registration - Providing Factory’s based on application state.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"text":"Dynamic Registration","level":2,"anchor":"Dynamic-Registration","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Consider the following optional factory.","type":"text"}]},{"code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}]},{"inlineContent":[{"type":"text","text":"Now let’s take a look at a dynamic registration in action."}],"type":"paragraph"},{"code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example:","type":"text"}]},{"code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The injected provider is optional by default since the Factory was defined that way.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Explicitly-Unwrapped-Optionals","text":"Explicitly Unwrapped Optionals"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"could"}]},{"text":" explicitly unwrap the optional…","type":"text"}]},{"type":"codeListing","code":["@Injected(\\.userProviding) private let provider: UserProviding!"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"inlineContent":[{"type":"text","text":"Your code is guaranteed to be safe."}],"type":"emphasis"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"I’d advise against it.","type":"text"}]},{"inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"type":"codeVoice","code":"@Injected"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"And also note that calling register also ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"removes any cached dependency from its associated scope.","type":"text"}]},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"text":"Optionals and Multiple Modules","anchor":"Optionals-and-Multiple-Modules","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it."}],"type":"paragraph"},{"inlineContent":[{"text":"See ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules"},{"text":" for more.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","kind":"article","role":"article","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"type":"topic"},"doc://Factory/documentation/Factory/Functional":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","kind":"article","role":"article","abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"url":"\/documentation\/factory\/functional","title":"Functional Injection","type":"topic"},"doc://Factory/documentation/Factory/Tags":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","kind":"article","role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"url":"\/documentation\/factory\/tags","title":"Tags","type":"topic"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","kind":"article","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"url":"\/documentation\/factory\/modules","title":"Modular Development","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","type":"topic"}}}