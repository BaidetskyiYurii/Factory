{"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"inlineContent":[{"text":"Optional Factory definitions have several uses, including:","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Dynamic Registration - Providing Factory’s based on application state."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Multiple-Module Registration - Registering Factory’s across modules to avoid cross-cutting concerns.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s take a look."}]},{"type":"heading","text":"Dynamic Registration","level":2,"anchor":"Dynamic-Registration"},{"inlineContent":[{"text":"Consider the following optional factory.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    let userProviding = Factory<UserProviding?> { self { nil } }","}"]},{"type":"paragraph","inlineContent":[{"text":"Looks strange, right? I mean, of what use is a Factory that returns nothing?","type":"text"}]},{"inlineContent":[{"text":"Now let’s take a look at a dynamic registration in action.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func authenticated(with user: User) {","    ...","    Container.shared.userProviding.register { UserProvider(user: user) }","    ...","}","","func logout() {","    ...","    Container.shared.userProviding.reset()","    ...","}"],"syntax":"swift"},{"inlineContent":[{"text":"Now any view model or service that needs an instance of an authenticated user will receive one (or nothing if no user is authenticated).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["class SomeViewModel: ObservableObject {","    @Injected(\\.userProviding) private let provider","    func update(email: String) {","        provider?.updateEmailAddress(email)","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The injected provider is optional by default since the Factory was defined that way."}]},{"anchor":"Explicitly-Unwrapped-Optionals","level":2,"text":"Explicitly Unwrapped Optionals","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Note that you ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"could","type":"text"}]},{"text":" explicitly unwrap the optional…","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Injected(\\.userProviding) private let provider: UserProviding!"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But doing so violates the core premise on which Factory was built in the first place: "},{"type":"emphasis","inlineContent":[{"text":"Your code is guaranteed to be safe.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"I’d advise against it."}],"type":"paragraph"},{"inlineContent":[{"text":"A few other things here. First, note that we used ","type":"text"},{"code":"@Injected","type":"codeVoice"},{"type":"text","text":" to supply an optional type. We don’t need a "},{"type":"codeVoice","code":"@OptionalInjected"},{"text":" property wrapper to do this as we did in Resolver. Same for ","type":"text"},{"code":"@LazyInjected","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And also note that calling register also "},{"inlineContent":[{"type":"text","text":"removes any cached dependency from its associated scope."}],"type":"emphasis"},{"type":"text","text":" This ensures that any new dependency injection request performed from that point on will always get the most recently defined instance of an object."}]},{"type":"heading","level":2,"anchor":"Optionals-and-Multiple-Modules","text":"Optionals and Multiple Modules"},{"type":"paragraph","inlineContent":[{"text":"This technique can also be handy when doing registrations in a project with multiple modules. It’s a bit complex, so there’s an entire page devoted to it.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","type":"reference","isActive":true},{"type":"text","text":" for more."}]}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Optionals"},"metadata":{"role":"article","modules":[{"name":"Factory"}],"roleHeading":"Article","title":"Optionals and Dynamic Registration"},"abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Functional","doc:\/\/Factory\/documentation\/Factory\/Tags"],"title":"Advanced Topics","generated":true}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/optionals"]}],"references":{"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","type":"topic","title":"Factory Modifiers","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"url":"\/documentation\/factory\/modifiers","kind":"article","role":"article"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","kind":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","url":"\/documentation\/factory\/cycle","role":"article"},"doc://Factory/documentation/Factory/Functional":{"type":"topic","kind":"article","title":"Functional Injection","abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"url":"\/documentation\/factory\/functional","identifier":"doc:\/\/Factory\/documentation\/Factory\/Functional","role":"article"},"doc://Factory/documentation/Factory/Design":{"type":"topic","kind":"article","title":"Designing Factory","abstract":[{"type":"text","text":"Rationale behind the design decisions made in Factory 1.0 and 2.0"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","role":"article"},"doc://Factory/documentation/Factory/Modules":{"role":"article","title":"Modular Development","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","url":"\/documentation\/factory\/modules","kind":"article","type":"topic"},"doc://Factory/documentation/Factory/Tags":{"role":"article","title":"Tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","url":"\/documentation\/factory\/tags","kind":"article","type":"topic"}}}