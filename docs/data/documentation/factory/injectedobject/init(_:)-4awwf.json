{"abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"init"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"wrappedValue","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"inlineContent":[{"text":"Still has issue with attempting to pass dependency into existing view when existing InjectedObject has keyPath.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"https:\/\/forums.swift.org\/t\/allow-property-wrappers-with-multiple-arguments-to-defer-initialization-when-wrappedvalue-is-not-specified"}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/injectedobject\/init(_:)-4awwf"]}],"kind":"symbol","metadata":{"modules":[{"name":"Factory"}],"extendedModule":"Factory","platforms":[{"name":"iOS","unavailable":false,"introducedAt":"14.0","beta":false,"deprecated":false},{"deprecated":false,"name":"macOS","introducedAt":"11.0","beta":false,"unavailable":false},{"introducedAt":"14.0","name":"tvOS","unavailable":false,"beta":false,"deprecated":false},{"introducedAt":"7.0","unavailable":false,"beta":false,"name":"watchOS","deprecated":false}],"roleHeading":"Initializer","role":"symbol","externalID":"s:7Factory14InjectedObjectVyACyxGxcfc","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"T"},{"text":" conforms to ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"init(_:)","symbolKind":"init"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/InjectedObject"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject\/init(_:)-4awwf","interfaceLanguage":"swift"},"sections":[],"references":{"doc://Factory/documentation/Factory/InjectedObject/init(_:)-4awwf":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject\/init(_:)-4awwf","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"T","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":"."}]},"kind":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Simple initializer with passed parameter bypassing injection."}],"url":"\/documentation\/factory\/injectedobject\/init(_:)-4awwf"},"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/InjectedObject":{"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InjectedObject"}],"navigatorTitle":[{"text":"InjectedObject","kind":"identifier"}],"url":"\/documentation\/factory\/injectedobject","abstract":[{"text":"Immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/InjectedObject","role":"symbol","title":"InjectedObject"}}}