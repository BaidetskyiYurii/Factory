{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may"},{"type":"text","text":" "},{"type":"text","text":"return a previously cached value from the specified scope."}]},{"type":"heading","text":"Defining a Factory","anchor":"Defining-a-Factory","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"type":"codeVoice","code":"ServiceType"},{"text":". To do that we need to extend a Factory ","type":"text"},{"type":"codeVoice","code":"Container"},{"type":"text","text":" and within"},{"text":" ","type":"text"},{"type":"text","text":"that container we define a new computed variable of type "},{"code":"Factory<ServiceType>","type":"codeVoice"},{"type":"text","text":". The type must be explicitly defined, and is usually a"},{"text":" ","type":"text"},{"type":"text","text":"protocol to which the returned dependency conforms."}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with"},{"type":"text","text":" "},{"type":"text","text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated"},{"type":"text","text":" "},{"text":"(see ","type":"text"},{"type":"codeVoice","code":"callAsFunction()"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}]},{"inlineContent":[{"type":"text","text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"]},{"type":"heading","anchor":"Transient","level":2,"text":"Transient"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"text":" ","type":"text"},{"text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has","type":"text"},{"text":" ","type":"text"},{"text":"been served.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Factory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"]},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"]},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"generated":true}],"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/factory"]}],"kind":"symbol","metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"externalID":"s:7FactoryAAV","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"modules":[{"name":"Factory"}],"title":"Factory","role":"symbol","symbolKind":"struct","roleHeading":"Structure"},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factory\/factorymodifying"},"doc://Factory/documentation/Factory/Factory":{"role":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"url":"\/documentation\/factory\/factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"title":"Factory","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"url":"\/documentation\/factory\/factory\/init(_:key:_:)","kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"(any ","kind":"text"},{"text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"title":"init(_:key:_:)","type":"topic","abstract":[{"type":"text","text":"Public initializer creates a Factory capable of managing dependencies of the desired type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","role":"symbol"},"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"kind":"article","title":"FactoryModifying Implementations","role":"collectionGroup","type":"topic","abstract":[],"url":"\/documentation\/factory\/factory\/factorymodifying-implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","title":"callAsFunction()","url":"\/documentation\/factory\/factory\/callasfunction()","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/Factory/resolve()":{"abstract":[{"type":"text","text":"Unsugared resolution function."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","title":"resolve()","url":"\/documentation\/factory\/factory\/resolve()","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"abstract":[{"text":"Registers a new factory closure capable of producing an object or service of the desired type.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"register","kind":"identifier"},{"kind":"text","text":"("},{"text":"factory","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","title":"register(factory:)","url":"\/documentation\/factory\/factory\/register(factory:)","role":"symbol","kind":"symbol"},"doc://Factory/s8SendableP":{"identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable","type":"unresolvable"},"doc://Factory/documentation/Factory/Factory/registration":{"abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"type":"text","text":" "},{"text":"and others.","type":"text"}],"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"registration","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","title":"registration","url":"\/documentation\/factory\/factory\/registration","role":"symbol","kind":"symbol"}}}