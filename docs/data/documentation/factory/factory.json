{"schemaVersion":{"minor":3,"major":0,"patch":0},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"title":"Default Implementations","generated":true}],"metadata":{"role":"symbol","symbolKind":"struct","title":"Factory","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"modules":[{"name":"Factory"}],"roleHeading":"Structure","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"externalID":"s:7FactoryAAV"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"kind":"symbol","abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"title":"Conforms To","kind":"relationships"}],"variants":[{"paths":["\/documentation\/factory\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">"}]}]},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"return a previously cached value from the specified scope."}],"type":"paragraph"},{"level":2,"type":"heading","anchor":"Defining-a-Factory","text":"Defining a Factory"},{"inlineContent":[{"text":"Let’s define a Factory that returns an instance of ","type":"text"},{"type":"codeVoice","code":"ServiceType"},{"type":"text","text":". To do that we need to extend a Factory "},{"type":"codeVoice","code":"Container"},{"type":"text","text":" and within"},{"text":" ","type":"text"},{"type":"text","text":"that container we define a new computed variable of type "},{"code":"Factory<ServiceType>","type":"codeVoice"},{"type":"text","text":". The type must be explicitly defined, and is usually a"},{"type":"text","text":" "},{"type":"text","text":"protocol to which the returned dependency conforms."}],"type":"paragraph"},{"code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with"},{"type":"text","text":" "},{"type":"text","text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated"},{"text":" ","type":"text"},{"text":"(see ","type":"text"},{"type":"codeVoice","code":"callAsFunction()"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"]},{"text":"Transient","type":"heading","level":2,"anchor":"Transient"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"type":"text","text":" "},{"text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has","type":"text"},{"type":"text","text":" "},{"type":"text","text":"been served."}]},{"inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"(any "},{"preciseIdentifier":"s:7Factory16ManagedContainerP","kind":"typeIdentifier","text":"ManagedContainer"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", () -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","title":"init(_:key:_:)","kind":"symbol","type":"topic","url":"\/documentation\/factory\/factory\/init(_:key:_:)","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}]},"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","title":"Factory","url":"\/documentation\/factory\/factory","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}]},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","role":"symbol","title":"callAsFunction()","abstract":[{"type":"text","text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may"},{"type":"text","text":" "},{"text":"return a cached value from the specified scope.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/factory\/callasfunction()","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://Factory/documentation/Factory/Factory/register(factory:)":{"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"register"},{"kind":"text","text":"("},{"text":"factory","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/factory\/factory\/register(factory:)","abstract":[{"type":"text","text":"Registers a new factory closure capable of producing an object or service of the desired type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","title":"register(factory:)"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","abstract":[],"role":"collectionGroup","url":"\/documentation\/factory\/factory\/factorymodifying-implementations","type":"topic","title":"FactoryModifying Implementations","kind":"article"},"doc://Factory/documentation/Factory/Factory/resolve()":{"title":"resolve()","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"resolve"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"}],"type":"topic","url":"\/documentation\/factory\/factory\/resolve()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"},"doc://Factory/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/Factory\/s8SendableP","type":"unresolvable"},"doc://Factory/documentation/Factory/Factory/registration":{"type":"topic","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"registration"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory0A12RegistrationV","text":"FactoryRegistration","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","kind":"symbol","title":"registration","url":"\/documentation\/factory\/factory\/registration","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration","abstract":[{"text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,","type":"text"},{"text":" ","type":"text"},{"text":"and others.","type":"text"}]}}}