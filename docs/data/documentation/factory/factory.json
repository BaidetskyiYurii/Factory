{"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"],"type":"conformsTo","kind":"relationships"}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"It’s used to produce an object of the desired type when required. This may be a brand new instance or Factory may","type":"text"},{"type":"text","text":" "},{"text":"return a previously cached value from the specified scope.","type":"text"}]},{"text":"Defining a Factory","level":2,"anchor":"Defining-a-Factory","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s define a Factory that returns an instance of "},{"code":"ServiceType","type":"codeVoice"},{"text":". To do that we need to extend a Factory ","type":"text"},{"type":"codeVoice","code":"Container"},{"type":"text","text":" and within"},{"type":"text","text":" "},{"text":"that container we define a new computed variable of type ","type":"text"},{"type":"codeVoice","code":"Factory<ServiceType>"},{"type":"text","text":". The type must be explicitly defined, and is usually a"},{"type":"text","text":" "},{"text":"protocol to which the returned dependency conforms.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Container {","    var service: Factory<ServiceType> {","        Factory(self) { MyService() }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the computed variable we define our Factory, passing it a reference to the enclosing container. We also provide it with"},{"type":"text","text":" "},{"text":"a closure that creates an instance of our dependency when required. That Factory is then returned to the caller, usually to be evaluated","type":"text"},{"type":"text","text":" "},{"text":"(see ","type":"text"},{"type":"codeVoice","code":"callAsFunction()"},{"type":"text","text":" below). Every time we resolve this factory we’ll get a new, unique instance of our object."}]},{"inlineContent":[{"text":"Factory also provides a bit of syntactic sugar that lets us do the same thing in a more convenient form,","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["extension Container {","    var service: Factory<ServiceType> {","        self { MyService() }","    }","}"],"syntax":"swift"},{"type":"heading","level":2,"anchor":"Transient","text":"Transient"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you’re concerned about building Factory’s on the fly, don’t be. Like SwiftUI Views, Factory structs and modifiers"},{"type":"text","text":" "},{"type":"text","text":"are lightweight and transitory. They’re created when needed and then immediately discarded once their purpose has"},{"type":"text","text":" "},{"type":"text","text":"been served."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Other operations exist for Factory. See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]}],"abstract":[{"type":"text","text":"A Factory manages the dependency injection process for a specific object or service."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Factory"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()"]},{"title":"Default Implementations","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations"],"generated":true}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Factory","kind":"identifier"}],"navigatorTitle":[{"text":"Factory","kind":"identifier"}],"role":"symbol","roleHeading":"Structure","externalID":"s:7FactoryAAV","title":"Factory","symbolKind":"struct","modules":[{"name":"Factory"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"paths":["\/documentation\/factory\/factory"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","sections":[],"references":{"doc://Factory/documentation/Factory/Factory/register(factory:)":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/register(factory:)","kind":"symbol","abstract":[{"type":"text","text":"Registers a new factory closure capable of producing an object or service of the desired type."}],"role":"symbol","title":"register(factory:)","url":"\/documentation\/factory\/factory\/register(factory:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"register"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"factory"},{"kind":"text","text":": () -> "},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}]},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"title":"Factory","url":"\/documentation\/factory\/factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"FactoryModifying"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","abstract":[{"type":"text","text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory."}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory/resolve()":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/resolve()","title":"resolve()","url":"\/documentation\/factory\/factory\/resolve()","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolve"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"abstract":[{"text":"Unsugared resolution function.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Factory/FactoryModifying-Implementations":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/FactoryModifying-Implementations","role":"collectionGroup","type":"topic","title":"FactoryModifying Implementations","url":"\/documentation\/factory\/factory\/factorymodifying-implementations","abstract":[],"kind":"article"},"doc://Factory/documentation/Factory/Factory/init(_:key:_:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"ManagedContainer","preciseIdentifier":"s:7Factory16ManagedContainerP"},{"text":", ","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", () -> "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","title":"init(_:key:_:)","url":"\/documentation\/factory\/factory\/init(_:key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/init(_:key:_:)","role":"symbol","abstract":[{"text":"Public initializer creates a Factory capable of managing dependencies of the desired type.","type":"text"}]},"doc://Factory/documentation/Factory/Factory/registration":{"url":"\/documentation\/factory\/factory\/registration","kind":"symbol","type":"topic","role":"symbol","title":"registration","abstract":[{"type":"text","text":"Internal parameters for this Factory including id, container, the factory closure itself, the scope,"},{"text":" ","type":"text"},{"text":"and others.","type":"text"}],"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"registration","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FactoryRegistration","preciseIdentifier":"s:7Factory0A12RegistrationV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/registration"},"doc://Factory/documentation/Factory/Factory/callAsFunction()":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}],"kind":"symbol","title":"callAsFunction()","abstract":[{"text":"Evaluates the factory and returns an object or service of the desired type. The resolved instance may be brand new or Factory may","type":"text"},{"text":" ","type":"text"},{"text":"return a cached value from the specified scope.","type":"text"}],"url":"\/documentation\/factory\/factory\/callasfunction()","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory\/callAsFunction()","type":"topic"}}}