{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Previews","doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging"],"generated":true,"title":"Development and Testing"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","anchor":"Circular-Dependency-Chain-Detection","text":"Circular Dependency Chain Detection"},{"type":"paragraph","inlineContent":[{"type":"text","text":"What’s a circular dependency? Let’s say that A needs B to be constructed, and B needs a C. But what happens if C needs an A?"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Examine the following class definitions."}]},{"type":"codeListing","code":["class CircularA {","    @Injected(\\.circularB) var circularB","}","","class CircularB {","    @Injected(\\.circularC) var circularC","}","","class CircularC {","    @Injected(\\.circularA) var circularA","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Attempting make an instance of "},{"type":"codeVoice","code":"CircularA"},{"type":"text","text":" is going to result in an infinite loop."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Why? Well, A’s injected property wrapper needs a B in to construct an A. Okay, fine. Let’s make one. But B’s wrapper needs a C, which can’t be made without injecting an A, which once more needs a B… and so on. Ad infinitum.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is a circular dependency chain.","type":"text"}]},{"text":"Resolution","level":2,"type":"heading","anchor":"Resolution"},{"inlineContent":[{"text":"Unfortunately, by the time this code is compiled and run it’s too late to break the cycle. We’ve effectively coded an infinite loop into our program.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All Factory can do in this case is die gracefully and in the process dump the dependency chain that indicates where the problem lies."}]},{"type":"codeListing","syntax":null,"code":["2022-12-23 14:57:23.512032-0600 FactoryDemo[47546:6946786] Factory\/Factory.swift:393: ","Fatal error: circular dependency chain - CircularA > CircularB > CircularC > CircularA"]},{"type":"paragraph","inlineContent":[{"text":"With the above information in hand we should be able to find the problem and fix it.","type":"text"}]},{"inlineContent":[{"type":"text","text":"We could fix things by changing CircularC’s injection wrapper to "},{"type":"codeVoice","code":"LazyInjected"},{"text":" or, better yet, ","type":"text"},{"type":"codeVoice","code":"WeakLazyInjected"},{"type":"text","text":" in order to avoid a retain cycle."}],"type":"paragraph"},{"inlineContent":[{"text":"But a better solution would probably entail finding and breaking out the functionality that ","type":"text"},{"code":"CircularA","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CircularC"},{"type":"text","text":" are depending upon into a "},{"inlineContent":[{"type":"text","text":"third"}],"type":"emphasis"},{"text":" object they both could include.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Circular dependencies such as this are usually a violation of the Single Responsibility Principle, and should be avoided."}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Due to the overhead involved, circular dependency detection only occurs when running the application in DEBUG mode. The code is stripped out of production builds for improved performance.","type":"text"}]}],"style":"important","name":"Important"},{"anchor":"Disabling-CDC-Detection","text":"Disabling CDC Detection","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If needed circular dependency chain detecting can be disabled by setting the detection limit to zero."}]},{"type":"codeListing","syntax":"swift","code":["Container.shared.manager.dependencyChainTestMax = 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The default value for "},{"type":"codeVoice","code":"dependencyChainTestMax"},{"text":" is 10. That means the detector fires if the same class type appears during a single resolution cycle more than 10 times.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This value can be increased (or decreased) as needed.","type":"text"}]}]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Chains","interfaceLanguage":"swift"},"metadata":{"title":"Circular Dependency Chains","roleHeading":"Article","modules":[{"name":"Factory"}],"role":"article"},"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/chains"]}],"abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}],"references":{"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","url":"\/documentation\/factory\/debugging","role":"article","type":"topic","title":"Debugging"},"doc://Factory/documentation/Factory/Previews":{"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Previews","url":"\/documentation\/factory\/previews","role":"article","type":"topic","title":"SwiftUI Previews"},"doc://Factory/documentation/Factory/Contexts":{"url":"\/documentation\/factory\/contexts","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}]},"doc://Factory/documentation/Factory/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","type":"topic","title":"Testing"}}}