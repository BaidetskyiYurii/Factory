{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"text":"the property wrapper instance if it hasn’t already been resolved.","type":"text"}]},{"syntax":"swift","code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"type":"codeListing"}]}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"externalID":"s:7Factory16WeakLazyInjectedV13resolvedOrNilxSgyF","roleHeading":"Instance Method","title":"resolvedOrNil()","symbolKind":"method","modules":[{"name":"Factory"}],"role":"symbol"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected"]]},"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/weaklazyinjected\/resolvedornil()"]}],"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"references":{"doc://Factory/documentation/Factory/WeakLazyInjected":{"url":"\/documentation\/factory\/weaklazyinjected","kind":"symbol","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected","type":"topic","abstract":[{"text":"Convenience property wrapper takes a factory and resolves a weak instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"WeakLazyInjected"}],"title":"WeakLazyInjected","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"WeakLazyInjected","kind":"identifier"}]},"doc://Factory/documentation/Factory/WeakLazyInjected/resolvedOrNil()":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/WeakLazyInjected\/resolvedOrNil()","role":"symbol","title":"resolvedOrNil()","abstract":[{"text":"Projected function returns resolved instance if it exists.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"url":"\/documentation\/factory\/weaklazyinjected\/resolvedornil()","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"}}}