{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/LazyInjected"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"init","kind":"keyword"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"keyPath"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":", ","kind":"text"},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">>) ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"C"},{"text":" : ","kind":"text"},{"kind":"typeIdentifier","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","preciseIdentifier":"s:7Factory15SharedContainerP","text":"SharedContainer"}]}]},{"kind":"parameters","parameters":[{"name":"keyPath","content":[{"type":"paragraph","inlineContent":[{"text":"KeyPath to a Factory on the specified Container.","type":"text"}]}]}]}],"abstract":[{"type":"text","text":"Initializes the property wrapper. The dependency isn’t resolved until the wrapped value is accessed for the first time."}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/init(_:)-8np9u"},"metadata":{"roleHeading":"Initializer","symbolKind":"init","role":"symbol","modules":[{"name":"Factory"}],"title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"<"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">>)"}],"externalID":"s:7Factory12LazyInjectedVyACyxGs7KeyPathCyqd__A2AVyxGGcAA15SharedContainerRd__lufc"},"variants":[{"paths":["\/documentation\/factory\/lazyinjected\/init(_:)-8np9u"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"references":{"doc://Factory/documentation/Factory/LazyInjected/init(_:)-8np9u":{"url":"\/documentation\/factory\/lazyinjected\/init(_:)-8np9u","type":"topic","abstract":[{"text":"Initializes the property wrapper. The dependency isn’t resolved until the wrapped value is accessed for the first time.","type":"text"}],"role":"symbol","title":"init(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/init(_:)-8np9u","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"C"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"KeyPath","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">>)"}],"kind":"symbol"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"type":"topic","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","url":"\/documentation\/factory\/lazyinjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Factory":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","type":"topic","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"title":"Factory","url":"\/documentation\/factory\/factory","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/SharedContainer":{"url":"\/documentation\/factory\/sharedcontainer","type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}]}}}