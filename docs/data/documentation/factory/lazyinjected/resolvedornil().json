{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/factory\/lazyinjected\/resolvedornil()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/LazyInjected"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolvedOrNil","kind":"identifier"},{"text":"() -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This can come in handy when you need to perform some sort of cleanup, but you don’t want to resolve"},{"type":"text","text":" "},{"type":"text","text":"the property wrapper instance if it hasn’t already been resolved."}],"type":"paragraph"},{"code":["deinit {","    $myService.resolvedOrNil()?.cleanup()","}"],"syntax":"swift","type":"codeListing"}]}],"sections":[],"metadata":{"title":"resolvedOrNil()","modules":[{"name":"Factory"}],"symbolKind":"method","role":"symbol","externalID":"s:7Factory12LazyInjectedV13resolvedOrNilxSgyF","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"text":"?","kind":"text"}]},"references":{"doc://Factory/documentation/Factory/LazyInjected/resolvedOrNil()":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"resolvedOrNil"},{"kind":"text","text":"() -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"type":"topic","title":"resolvedOrNil()","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Projected function returns resolved instance if it exists."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected\/resolvedOrNil()","url":"\/documentation\/factory\/lazyinjected\/resolvedornil()"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/LazyInjected":{"type":"topic","title":"LazyInjected","abstract":[{"text":"Convenience property wrapper takes a factory and resolves an instance of the desired type the first time the wrapped value is requested.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"LazyInjected"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/LazyInjected","url":"\/documentation\/factory\/lazyinjected","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"LazyInjected","kind":"identifier"}],"kind":"symbol"}}}