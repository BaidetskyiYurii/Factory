{"variants":[{"paths":["\/documentation\/factory\/containermanager"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/Factory\/s8SendableP"],"kind":"relationships","type":"conformsTo"}],"kind":"symbol","identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","interfaceLanguage":"swift"},"metadata":{"externalID":"s:7Factory16ContainerManagerC","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}],"title":"ContainerManager","navigatorTitle":[{"kind":"identifier","text":"ContainerManager"}],"modules":[{"name":"Factory"}],"role":"symbol","symbolKind":"class","roleHeading":"Class"},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/init()"],"title":"Initializers"},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/defaultScope","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/dependencyChainTestMax","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/logger","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/promiseTriggersError","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/trace"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/pop()","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/push()","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/reset(scope:)"],"title":"Instance Methods"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContainerManager"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Every container requires a ContainerManager.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"ContainerManager also implements several functions that can be used to reset the container"},{"text":" ","type":"text"},{"type":"text","text":"to a pristine state, as well as push\/pop methods that can save and restore the current state."}]},{"type":"paragraph","inlineContent":[{"text":"Those functions are designed primarily for testing.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Class is @unchecked Sendable as all public state is managed via global locking mechanisms"}]}],"kind":"content"}],"abstract":[{"type":"text","text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container."}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/ContainerManager/trace":{"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/trace","url":"\/documentation\/factory\/containermanager\/trace","title":"trace","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"trace","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"text":"Public var enabling factory resolution trace statements in debug mode for ALL containers.","type":"text"}]},"doc://Factory/documentation/Factory/ContainerManager/promiseTriggersError":{"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Public variable promise behavior"}],"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"promiseTriggersError"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"url":"\/documentation\/factory\/containermanager\/promisetriggerserror","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/promiseTriggersError","title":"promiseTriggersError"},"doc://Factory/documentation/Factory/ContainerManager/push()":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"push"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","title":"push()","url":"\/documentation\/factory\/containermanager\/push()","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/push()","abstract":[{"text":"Test function pushes the current registration and cache states","type":"text"}]},"doc://Factory/documentation/Factory/ContainerManager/init()":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"title":"init()","role":"symbol","url":"\/documentation\/factory\/containermanager\/init()","type":"topic","abstract":[{"type":"text","text":"Public initializer"}]},"doc://Factory/documentation/Factory/ContainerManager/pop()":{"title":"pop()","abstract":[{"type":"text","text":"Test function pops and restores a previously pushed registration and cache state"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/pop()","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"pop"},{"text":"()","kind":"text"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/pop()"},"doc://Factory/documentation/Factory/ContainerManager/defaultScope":{"title":"defaultScope","abstract":[{"type":"text","text":"Default scope"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/defaultScope","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"defaultScope","kind":"identifier"},{"kind":"text","text":": "},{"text":"Scope","preciseIdentifier":"s:7Factory5ScopeC","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/defaultscope"},"doc://Factory/documentation/Factory/ContainerManager":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ContainerManager","kind":"identifier"}],"type":"topic","title":"ContainerManager","url":"\/documentation\/factory\/containermanager","abstract":[{"text":"ContainerManager manages the registration and scope caching storage mechanisms for a given container.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContainerManager","kind":"identifier"}]},"doc://Factory/documentation/Factory/ContainerManager/reset(options:)":{"title":"reset(options:)","abstract":[{"type":"text","text":"Resets the Container to its original state, removing all registrations and clearing all scope caches."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/reset(options:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/reset(options:)"},"doc://Factory/documentation/Factory/ContainerManager/reset(scope:)":{"title":"reset(scope:)","abstract":[{"text":"Clears any cached values associated with a specific scope, leaving the other scope caches intact.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/reset(scope:)","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"text":"(","kind":"text"},{"text":"scope","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Scope","preciseIdentifier":"s:7Factory5ScopeC","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/reset(scope:)"},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/ContainerManager/dependencyChainTestMax":{"title":"dependencyChainTestMax","abstract":[{"type":"text","text":"Public variable exposing dependency chain test maximum"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/dependencyChainTestMax","type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependencyChainTestMax","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/dependencychaintestmax"},"doc://Factory/documentation/Factory/ContainerManager/logger":{"abstract":[{"type":"text","text":"Public access to logging facility in debug mode for ALL containers."}],"title":"logger","identifier":"doc:\/\/Factory\/documentation\/Factory\/ContainerManager\/logger","type":"topic","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"logger"},{"text":": (","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"}],"role":"symbol","url":"\/documentation\/factory\/containermanager\/logger"}}}