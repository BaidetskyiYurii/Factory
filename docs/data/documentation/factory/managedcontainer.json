{"metadata":{"externalID":"s:7Factory16ManagedContainerP","symbolKind":"protocol","roleHeading":"Protocol","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"role":"symbol","modules":[{"name":"Factory"}],"title":"ManagedContainer","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedContainer"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"},{"text":" : AnyObject, ","kind":"text"},{"text":"Sendable","preciseIdentifier":"s:s8SendableP","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a container only supports ManagedContainer then the container must be instantiated and passed as an instance. Hereâ€™s"},{"text":" ","type":"text"},{"text":"an example of passing such a container to a view model for dependency resolution.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class ContentViewModel {","    let service: MyServiceType","    init(container: Container) {","        service = container.service()","    }","}"]},{"inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","isActive":true},{"text":" for more information.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager"],"title":"Instance Properties"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)"],"title":"Instance Methods"}],"relationshipsSections":[{"identifiers":["doc:\/\/Factory\/s8SendableP"],"type":"inheritsFrom","title":"Inherits From","kind":"relationships"},{"type":"inheritedBy","title":"Inherited By","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"kind":"relationships"},{"title":"Conforming Types","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container"],"type":"conformingTypes","kind":"relationships"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/managedcontainer"]}],"sections":[],"references":{"doc://Factory/documentation/Factory/ManagedContainer/decorator(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"text":"(((","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":") -> ())?)"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","kind":"symbol","abstract":[{"type":"text","text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container."}],"title":"decorator(_:)","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/decorator(_:)"},"doc://Factory/documentation/Factory/Resolving":{"kind":"symbol","role":"symbol","url":"\/documentation\/factory\/resolving","abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"Resolving","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","title":"Resolving"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-33ecn":{"type":"topic","title":"promised(key:)","kind":"symbol","abstract":[{"text":"Syntactic sugar allows container to create a parameter factory whose optional registration is promised before resolution.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","url":"\/documentation\/factory\/managedcontainer\/promised(key:)-33ecn","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}]},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"title":"Container","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"url":"\/documentation\/factory\/container"},"doc://Factory/documentation/Factory/Containers":{"kind":"article","abstract":[{"text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","title":"Containers","type":"topic","url":"\/documentation\/factory\/containers","role":"article"},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-6ql8v":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", () -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","kind":"symbol","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound Factory."}],"title":"callAsFunction(key:_:)","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-6ql8v"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-1ucr5":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":") -> "},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?>","kind":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","kind":"symbol","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution."}],"title":"promised(key:)","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5"},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"title":"ManagedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","role":"symbol","type":"topic","abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}]},"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/ManagedContainer/manager":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"manager","kind":"identifier"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Factory16ContainerManagerC","kind":"typeIdentifier","text":"ContainerManager"}],"kind":"symbol","url":"\/documentation\/factory\/managedcontainer\/manager","required":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager","title":"manager","role":"symbol","type":"topic","abstract":[{"text":"Defines the ContainerManager used to manage registrations, resolutions, and scope caching for that container. Encapsulating the code in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"this fashion makes creating and using your own custom containers much simpler."}]},"doc://Factory/documentation/Factory/ManagedContainer/with(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"with","kind":"identifier"},{"text":"((","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)","kind":"symbol","abstract":[{"type":"text","text":"Defines a with function to allow container transformation on assignment."}],"title":"with(_:)","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/with(_:)"},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory/ManagedContainer/reset(options:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"reset","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"FactoryResetOptions","kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12ResetOptionsO"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","kind":"symbol","abstract":[{"type":"text","text":"Defines a thread safe access mechanism to reset the container."}],"title":"reset(options:)","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/reset(options:)"},"doc://Factory/documentation/Factory/SharedContainer":{"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"kind":"identifier","text":"SharedContainer"}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","abstract":[{"type":"text","text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers."}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SharedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-8rljq":{"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", ("},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ParameterFactory","preciseIdentifier":"s:7Factory09ParameterA0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-8rljq","title":"callAsFunction(key:_:)","kind":"symbol","abstract":[{"text":"Syntactic sugar allows container to create a properly bound ParameterFactory.","type":"text"}]}}}