{"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)"],"title":"Instance Methods"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"abstract":[{"type":"text","text":"ManagedContainer defines the core protocol all Containers must adopt."}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/managedcontainer"]}],"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"},{"kind":"text","text":" : AnyObject, "},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"If a container only supports ManagedContainer then the container must be instantiated and passed as an instance. Hereâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"an example of passing such a container to a view model for dependency resolution.","type":"text"}]},{"code":["class ContentViewModel {","    let service: MyServiceType","    init(container: Container) {","        service = container.service()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","type":"reference"},{"type":"text","text":" for more information."}],"type":"paragraph"}]}],"metadata":{"role":"symbol","roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"}],"externalID":"s:7Factory16ManagedContainerP","navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"title":"ManagedContainer","symbolKind":"protocol","modules":[{"name":"Factory"}]},"relationshipsSections":[{"type":"inheritsFrom","identifiers":["doc:\/\/Factory\/s8SendableP"],"kind":"relationships","title":"Inherits From"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"],"kind":"relationships","title":"Inherited By","type":"inheritedBy"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container"],"type":"conformingTypes","title":"Conforming Types","kind":"relationships"}],"references":{"doc://Factory/documentation/Factory/ManagedContainer/decorator(_:)":{"kind":"symbol","title":"decorator(_:)","abstract":[{"type":"text","text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","url":"\/documentation\/factory\/managedcontainer\/decorator(_:)","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"kind":"text","text":"((("},{"kind":"keyword","text":"Any"},{"text":") -> ())?)","kind":"text"}]},"doc://Factory/documentation/Factory/Resolving":{"title":"Resolving","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","type":"topic","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}],"url":"\/documentation\/factory\/resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"abstract":[{"text":"When protocol is applied to a container it enables a typed registration\/resolution mode.","type":"text"}]},"doc://Factory/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-1ucr5":{"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","type":"topic","role":"symbol","title":"promised(key:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"promised"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}]},"doc://Factory/documentation/Factory/Containers":{"kind":"article","type":"topic","title":"Containers","url":"\/documentation\/factory\/containers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}]},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-8rljq":{"title":"callAsFunction(key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", (","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"ParameterFactory","preciseIdentifier":"s:7Factory09ParameterA0V","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-8rljq","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound ParameterFactory."}]},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","type":"topic","title":"Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"url":"\/documentation\/factory\/container","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}]},"doc://Factory/documentation/Factory/ManagedContainer":{"url":"\/documentation\/factory\/managedcontainer","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ManagedContainer"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","type":"topic","title":"ManagedContainer"},"doc://Factory/documentation/Factory/SharedContainer":{"url":"\/documentation\/factory\/sharedcontainer","type":"topic","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"title":"SharedContainer","identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}]},"doc://Factory/documentation/Factory/ManagedContainer/manager":{"url":"\/documentation\/factory\/managedcontainer\/manager","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager","type":"topic","required":true,"role":"symbol","title":"manager","kind":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"manager","kind":"identifier"},{"text":": ","kind":"text"},{"text":"ContainerManager","preciseIdentifier":"s:7Factory16ContainerManagerC","kind":"typeIdentifier"}],"abstract":[{"text":"Defines the ContainerManager used to manage registrations, resolutions, and scope caching for that container. Encapsulating the code in","type":"text"},{"type":"text","text":" "},{"text":"this fashion makes creating and using your own custom containers much simpler.","type":"text"}]},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-6ql8v":{"url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-6ql8v","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","type":"topic","role":"symbol","title":"callAsFunction(key:_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", () -> "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Factory","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"abstract":[{"text":"Syntactic sugar allows container to create a properly bound Factory.","type":"text"}]},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-33ecn":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a parameter factory whose optional registration is promised before resolution."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-33ecn","type":"topic","kind":"symbol","role":"symbol","title":"promised(key:)"},"doc://Factory/documentation/Factory/ManagedContainer/reset(options:)":{"url":"\/documentation\/factory\/managedcontainer\/reset(options:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","type":"topic","role":"symbol","title":"reset(options:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions"},{"kind":"text","text":")"}],"abstract":[{"text":"Defines a thread safe access mechanism to reset the container.","type":"text"}]},"doc://Factory/documentation/Factory/ManagedContainer/with(_:)":{"url":"\/documentation\/factory\/managedcontainer\/with(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)","type":"topic","role":"symbol","title":"with(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"with","kind":"identifier"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"text":"Defines a with function to allow container transformation on assignment.","type":"text"}]}}}