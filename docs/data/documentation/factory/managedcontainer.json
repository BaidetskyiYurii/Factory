{"topicSections":[{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)"]}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","identifiers":["doc:\/\/Factory\/s8SendableP"],"title":"Inherits From"},{"type":"inheritedBy","kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Resolving","doc:\/\/Factory\/documentation\/Factory\/SharedContainer"]},{"title":"Conforming Types","kind":"relationships","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container"],"type":"conformingTypes"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/managedcontainer"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","interfaceLanguage":"swift"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"},{"kind":"text","text":" : AnyObject, "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a container only supports ManagedContainer then the container must be instantiated and passed as an instance. Hereâ€™s"},{"type":"text","text":" "},{"type":"text","text":"an example of passing such a container to a view model for dependency resolution."}]},{"code":["class ContentViewModel {","    let service: MyServiceType","    init(container: Container) {","        service = container.service()","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","isActive":true},{"text":" for more information.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"metadata":{"navigatorTitle":[{"kind":"identifier","text":"ManagedContainer"}],"title":"ManagedContainer","roleHeading":"Protocol","modules":[{"name":"Factory"}],"role":"symbol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"externalID":"s:7Factory16ManagedContainerP"},"references":{"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-6ql8v":{"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound Factory."}],"title":"callAsFunction(key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-6ql8v","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", () -> "},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-6ql8v"},"doc://Factory/documentation/Factory/ManagedContainer/with(_:)":{"title":"with(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"with","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/with(_:)","role":"symbol","abstract":[{"type":"text","text":"Defines a with function to allow container transformation on assignment."}],"kind":"symbol","url":"\/documentation\/factory\/managedcontainer\/with(_:)","type":"topic"},"doc://Factory/documentation/Factory/Resolving":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Resolving","navigatorTitle":[{"kind":"identifier","text":"Resolving"}],"role":"symbol","kind":"symbol","url":"\/documentation\/factory\/resolving","abstract":[{"type":"text","text":"When protocol is applied to a container it enables a typed registration\/resolution mode."}],"title":"Resolving","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"Resolving","kind":"identifier"}]},"doc://Factory/documentation/Factory/ManagedContainer/callAsFunction(key:_:)-8rljq":{"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound ParameterFactory."}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/factory\/managedcontainer\/callasfunction(key:_:)-8rljq","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"P"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", (","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"text":"ParameterFactory","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"callAsFunction(key:_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/callAsFunction(key:_:)-8rljq"},"doc://Factory/documentation/Factory/ManagedContainer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/managedcontainer","role":"symbol","title":"ManagedContainer","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer","navigatorTitle":[{"text":"ManagedContainer","kind":"identifier"}],"abstract":[{"text":"ManagedContainer defines the core protocol all Containers must adopt.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Containers":{"role":"article","abstract":[{"type":"text","text":"Containers are the cornerstone of Factory 2.0. What are they and how do we use them?"}],"title":"Containers","type":"topic","url":"\/documentation\/factory\/containers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Containers","kind":"article"},"doc://Factory/documentation/Factory/SharedContainer":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/SharedContainer","role":"symbol","title":"SharedContainer","abstract":[{"text":"SharedContainer defines the protocol all Containers must adopt if they want to support Service Locator style injection or support any of the injection property wrappers.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"SharedContainer","kind":"identifier"}],"url":"\/documentation\/factory\/sharedcontainer","navigatorTitle":[{"text":"SharedContainer","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Container":{"url":"\/documentation\/factory\/container","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"title":"Container","kind":"symbol","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/reset(options:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/reset(options:)","role":"symbol","title":"reset(options:)","abstract":[{"type":"text","text":"Defines a thread safe access mechanism to reset the container."}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"reset"},{"kind":"text","text":"("},{"text":"options","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory0A12ResetOptionsO","text":"FactoryResetOptions","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/factory\/managedcontainer\/reset(options:)","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-33ecn":{"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a parameter factory whose optional registration is promised before resolution."}],"title":"promised(key:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-33ecn","type":"topic","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA0V","kind":"typeIdentifier","text":"ParameterFactory"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?>","kind":"text"}],"role":"symbol","url":"\/documentation\/factory\/managedcontainer\/promised(key:)-33ecn"},"doc://Factory/documentation/Factory/ManagedContainer/decorator(_:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/decorator(_:)","kind":"symbol","type":"topic","abstract":[{"text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"decorator","kind":"identifier"},{"text":"(((","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":") -> ())?)"}],"title":"decorator(_:)","url":"\/documentation\/factory\/managedcontainer\/decorator(_:)","role":"symbol"},"doc://Factory/documentation/Factory/ManagedContainer/promised(key:)-1ucr5":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"url":"\/documentation\/factory\/managedcontainer\/promised(key:)-1ucr5","role":"symbol","title":"promised(key:)","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/promised(key:)-1ucr5","abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"kind":"symbol"},"doc://Factory/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/Factory\/s8SendableP"},"doc://Factory/documentation/Factory/ManagedContainer/manager":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ManagedContainer\/manager","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"manager","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Factory16ContainerManagerC","kind":"typeIdentifier","text":"ContainerManager"}],"url":"\/documentation\/factory\/managedcontainer\/manager","required":true,"abstract":[{"type":"text","text":"Defines the ContainerManager used to manage registrations, resolutions, and scope caching for that container. Encapsulating the code in"},{"type":"text","text":" "},{"text":"this fashion makes creating and using your own custom containers much simpler.","type":"text"}],"type":"topic","title":"manager"}}}