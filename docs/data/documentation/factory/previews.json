{"kind":"article","abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"metadata":{"title":"SwiftUI Previews","role":"article","modules":[{"name":"Factory"}],"roleHeading":"Article"},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Previews","interfaceLanguage":"swift"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"inlineContent":[{"type":"text","text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look."}],"type":"paragraph"},{"type":"heading","anchor":"SwiftUI-Integrations","level":2,"text":"SwiftUI Integrations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"code":"StateObject","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ObservedObject"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"type":"text","text":"Keep in mind that if you assign to an "},{"code":"ObservedObject","type":"codeVoice"},{"text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes).","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"SwiftUI-Previews","text":"SwiftUI Previews","level":2},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"level":2,"type":"heading","text":"SwiftUI #Previews","anchor":"SwiftUI-Previews"},{"inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15 and iOS 17… but there’s a problem. Attempting to do the above gives us an error."}],"type":"paragraph"},{"syntax":"swift","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    ContentView() \/\/ error: Result of 'ContentView' initializer is unused","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The solution lies in recognizing the fact that the #Preview closure is not a ViewBuilder. To fix it we just need to explicitly return our view.","type":"text"}]},{"code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    return ContentView()","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or we could simply turn the expression into a ViewBuilder using our old friend, Group.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"inlineContent":[{"text":"Group actually has a few additional uses…","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"Multiple-Previews","text":"Multiple Previews"},{"type":"paragraph","inlineContent":[{"text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}]},{"code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Of course, it’s even easier with #Preview.","type":"text"}],"type":"paragraph"},{"code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Since #Preview has been back-ported to iOS 13, I’d use it from now on. (Assuming of course that you can migrate your project to Xcode 15.)","type":"text"}],"type":"paragraph"},{"type":"heading","level":2,"anchor":"InjectedObject","text":"InjectedObject"},{"type":"paragraph","inlineContent":[{"text":"Should you prefer, you can also use ","type":"text"},{"type":"codeVoice","code":"InjectedObject"},{"text":", an immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"text":" ","type":"text"},{"text":"and @EnvironmentObject.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath","type":"text"},{"type":"text","text":" "},{"text":"and provides it to a wrapped instance of StateObject.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"]},{"inlineContent":[{"text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service","type":"text"},{"text":" ","type":"text"},{"text":"or dependency.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update.","type":"text"}]},{"inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have a service that could be consumed from a view or a view model."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See "},{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","isActive":true,"type":"reference"},{"type":"text","text":" for more details on graph."}]}]}]},{"text":"InjectedObject Previews","level":2,"anchor":"InjectedObject-Previews","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Single previews work exactly the same.","type":"text"}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier."}]},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead of passing the model to the view directly, we need to create the entire "},{"type":"codeVoice","code":"InjectedObject(model1)"},{"type":"text","text":" pair and pass that."}]},{"type":"paragraph","inlineContent":[{"text":"That said, and as we’ve shown before, it’s even easier with #Preview.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"]},{"text":"Common Setup","type":"heading","anchor":"Common-Setup","level":2},{"inlineContent":[{"type":"text","text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier."}],"type":"paragraph"},{"code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"],"type":"codeListing","syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/previews"]}],"references":{"doc://Factory/documentation/Factory/Scopes":{"title":"Scopes","identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","kind":"article","role":"collectionGroup","url":"\/documentation\/factory\/scopes","abstract":[{"type":"text","text":"Not everything wants to be a Singleton. Learn the power of Scopes."}]},"doc://Factory/documentation/Factory/Chains":{"kind":"article","title":"Circular Dependency Chains","url":"\/documentation\/factory\/chains","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","role":"article","type":"topic","abstract":[{"type":"text","text":"Detecting and solving Circular Dependency Chains."}]},"doc://Factory/documentation/Factory/Debugging":{"abstract":[{"type":"text","text":"Additional support for debugging resolution cycles, dependency chains and other issue."}],"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","url":"\/documentation\/factory\/debugging","role":"article","type":"topic","title":"Debugging"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Testing":{"abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}],"kind":"article","url":"\/documentation\/factory\/testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","role":"article","type":"topic","title":"Testing"},"doc://Factory/documentation/Factory/Contexts":{"url":"\/documentation\/factory\/contexts","kind":"article","role":"article","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","title":"Contexts","abstract":[{"text":"Changing injection results under special circumstances.","type":"text"}]}}}