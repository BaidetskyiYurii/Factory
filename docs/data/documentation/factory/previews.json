{"kind":"article","schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"SwiftUI Previews","modules":[{"name":"Factory"}],"roleHeading":"Article","role":"article"},"abstract":[{"type":"text","text":"Mocking dependencies for SwiftUI Previews."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/previews"]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Previews"},"sections":[],"primaryContentSections":[{"content":[{"level":2,"type":"heading","anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Factory can make SwiftUI Previews easier when we’re using View Models and those view models depend on internal dependencies. Let’s take a look.","type":"text"}]},{"level":2,"type":"heading","text":"SwiftUI Integrations","anchor":"SwiftUI-Integrations"},{"inlineContent":[{"type":"text","text":"Factory can be used in SwiftUI to assign a dependency to a "},{"type":"codeVoice","code":"StateObject"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"ObservedObject"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct ContentView: View {","    @StateObject private var viewModel = Container.shared.contentViewModel()","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Keep in mind that if you assign to an ","type":"text"},{"type":"codeVoice","code":"ObservedObject"},{"text":" your Factory is responsible for managing the object’s lifecycle (see the section on Scopes).","type":"text"}]},{"type":"heading","anchor":"SwiftUI-Previews","level":2,"text":"SwiftUI Previews"},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of updating a view model’s service dependency in order to setup a particular state for  preview.","type":"text"}]},{"syntax":"swift","code":["struct ContentView: View {","    @StateObject var viewModel = ContentViewModel()","    var body: some View {","        ...","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we can control where the view model gets its data then we can put the view model into pretty much any state we choose."}]},{"level":2,"anchor":"SwiftUI-Previews","type":"heading","text":"SwiftUI #Previews"},{"inlineContent":[{"type":"text","text":"The same can be done using the new macro-based #Preview option added to Xcode 15 and iOS 17… but there’s a problem. Attempting to do the above gives us an error."}],"type":"paragraph"},{"code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    ContentView() \/\/ error: Result of 'ContentView' initializer is unused","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The solution lies in recognizing the fact that the #Preview closure is not a ViewBuilder. To fix it we just need to explicitly return our view."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#Preview {","    let _ = Container.myService.register { MockServiceN(4) }","    return ContentView()","}"]},{"inlineContent":[{"type":"text","text":"Or we could simply turn the expression into a ViewBuilder using our old friend, Group."}],"type":"paragraph"},{"type":"codeListing","code":["#Preview {","    Group {","        let _ = Container.myService.register { MockServiceN(4) }","        ContentView()","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Group actually has a few additional uses…"}]},{"anchor":"Multiple-Previews","level":2,"type":"heading","text":"Multiple Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If we want to do multiple previews at once, each with different data, we simply need to instantiate our view models and pass them into the view as parameters."}]},{"inlineContent":[{"type":"text","text":"Given the ContentView we used above…"}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myService.register { MockServiceN(4) }","            let vm1 = ContentViewModel()","            ContentView(viewModel: vm1)","            ","            let _ = Container.shared.myService.register { MockServiceN(8) }","            let vm2 = ContentViewModel()","            ContentView(viewModel: vm2)","        }","    }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Of course, it’s even easier with #Preview."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"]},{"inlineContent":[{"type":"text","text":"Since #Preview has been back-ported to iOS 13, I’d use it from now on. (Assuming of course that you can migrate your project to Xcode 15.)"}],"type":"paragraph"},{"text":"InjectedObject","type":"heading","level":2,"anchor":"InjectedObject"},{"inlineContent":[{"type":"text","text":"Should you prefer, you can also use "},{"code":"InjectedObject","type":"codeVoice"},{"text":", an immediate injection property wrapper for SwiftUI ObservableObjects.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This wrapper is meant for use in SwiftUI Views and exposes bindable objects similar to that of SwiftUI @StateObject"},{"type":"text","text":" "},{"type":"text","text":"and @EnvironmentObject."}]},{"inlineContent":[{"type":"text","text":"Like the other Injected property wrappers, InjectedObject wraps obtains the dependency from the Factory keypath"},{"type":"text","text":" "},{"type":"text","text":"and provides it to a wrapped instance of StateObject."}],"type":"paragraph"},{"type":"codeListing","code":["struct ContentView: View {","    @InjectedObject(\\.contentViewModel) var model","    var body: some View {","        ...","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"ContentViewModel must, of course, be of type ObservableObject and is registered like any other service"},{"text":" ","type":"text"},{"type":"text","text":"or dependency."}]},{"code":["extension Container {","    var contentViewModel: Factory<ContentViewModel> {","        self { ContentViewModel() }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"As with StateObject and ObservedObject, updating the object’s state will trigger a view update."}]},{"inlineContent":[{"type":"text","text":"InjectedObject is also handy when…"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You have a service that could be consumed from a view or a view model.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"You have view model dependencies that depend on the Graph scope and you need the view model to be the graph’s root. See "},{"isActive":true,"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"reference"},{"type":"text","text":" for more details on graph."}],"type":"paragraph"}]}],"type":"orderedList"},{"anchor":"InjectedObject-Previews","level":2,"type":"heading","text":"InjectedObject Previews"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Single previews work exactly the same."}]},{"syntax":"swift","type":"codeListing","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But due a bug in how Swift manages property wrappers with built in initializers, doing multiple previews is just a little different than shown earlier."}]},{"type":"codeListing","syntax":"swift","code":["struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        Group {","            let _ = Container.shared.myServiceType.register { MockServiceN(44) }","            let model1 = ContentViewModel()","            ContentView(model: InjectedObject(model1))","            ","            let _ = Container.shared.myServiceType.register { MockServiceN(88) }","            let model2 = ContentViewModel()","            ContentView(model: InjectedObject(model2))","        }","    }","}"]},{"inlineContent":[{"text":"Instead of passing the model to the view directly, we need to create the entire ","type":"text"},{"code":"InjectedObject(model1)","type":"codeVoice"},{"type":"text","text":" pair and pass that."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That said, and as we’ve shown before, it’s even easier with #Preview."}]},{"syntax":"swift","code":["#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(4) }","        ContentView()","    }","}","#Preview {","    Group {","        let _ = Container.shared.myService.register { MockServiceN(8) }","        ContentView()","    }","}"],"type":"codeListing"},{"text":"Common Setup","type":"heading","level":2,"anchor":"Common-Setup"},{"inlineContent":[{"text":"If we have several mocks that we use all of the time in our previews or unit tests, we can also add a setup function to a given container to make this easier.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Container {","    func setupMocks() {","        myService.register { MockServiceN(4) }","        sharedService.register { MockService2() }","    }","}","","struct ContentView_Previews: PreviewProvider {","    static var previews: some View {","        let _ = Container.shared.setupMocks()","        ContentView()","    }","}"]}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Development and Testing","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Testing","doc:\/\/Factory\/documentation\/Factory\/Contexts","doc:\/\/Factory\/documentation\/Factory\/Debugging","doc:\/\/Factory\/documentation\/Factory\/Chains"]}],"references":{"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/Scopes":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Scopes","type":"topic","title":"Scopes","abstract":[{"text":"Not everything wants to be a Singleton. Learn the power of Scopes.","type":"text"}],"url":"\/documentation\/factory\/scopes","kind":"article","role":"collectionGroup"},"doc://Factory/documentation/Factory/Testing":{"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/testing","title":"Testing","identifier":"doc:\/\/Factory\/documentation\/Factory\/Testing","abstract":[{"type":"text","text":"Using Factory for Unit and UI Testing."}]},"doc://Factory/documentation/Factory/Chains":{"title":"Circular Dependency Chains","kind":"article","url":"\/documentation\/factory\/chains","type":"topic","role":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Chains","abstract":[{"text":"Detecting and solving Circular Dependency Chains.","type":"text"}]},"doc://Factory/documentation/Factory/Contexts":{"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/contexts","title":"Contexts","identifier":"doc:\/\/Factory\/documentation\/Factory\/Contexts","abstract":[{"type":"text","text":"Changing injection results under special circumstances."}]},"doc://Factory/documentation/Factory/Debugging":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Debugging","url":"\/documentation\/factory\/debugging","title":"Debugging","role":"article","kind":"article","abstract":[{"text":"Additional support for debugging resolution cycles, dependency chains and other issue.","type":"text"}],"type":"topic"}}}