{"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Factory capable of taking parameters at runtime"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/parameterfactory"]}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration"]},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations"],"generated":true,"title":"Default Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"ParameterFactory","kind":"identifier"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"text":">","kind":"text"}]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like it or not, some services require one or more parameters to be passed to them in order to be initialized correctly. In that case use "},{"code":"ParameterFactory","type":"codeVoice"},{"type":"text","text":"."}]},{"inlineContent":[{"text":"We define a ParameterFactory exactly as we do a normal factory with two exceptions: we need to specify the","type":"text"},{"text":" ","type":"text"},{"text":"parameter type, and we need to consume the passed parameter in our factory closure.","type":"text"}],"type":"paragraph"},{"code":["extension Container {","    var parameterService: ParameterFactory<Int, MyServiceType> {","       self { ParameterService(value: $0) }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Resolving it is straightforward. Just pass the parameter to the Factory.","type":"text"}]},{"type":"codeListing","code":["let myService = Container.shared.parameterService(n)"],"syntax":"Swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One caveat is that you can’t use the "},{"code":"@Injected","type":"codeVoice"},{"text":" property wrapper with ","type":"text"},{"code":"ParameterFactory","type":"codeVoice"},{"type":"text","text":" as there’s no way to get"},{"type":"text","text":" "},{"type":"text","text":"the needed parameters to the property wrapper before the wrapper is initialized. That being the case, you’ll"},{"type":"text","text":" "},{"type":"text","text":"probably need to reference the container directly and do something similar to the following."}]},{"code":["class MyClass {","    var myService: MyServiceType","    init(_ n: Int) {","        myService = Container.shared.parameterService(n)","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If you need to pass more than one parameter just use a tuple, dictionary, or struct."}],"type":"paragraph"},{"syntax":"swift","code":["var tupleService: ParameterFactory<(Int, Int), MultipleParameterService> {","    self { (a, b) in","        MultipleParameterService(a: a, b: b)","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Finally, if you define a scope keep in mind that the first argument passed will be used to create the dependency","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and "},{"inlineContent":[{"text":"that","type":"text"}],"type":"emphasis"},{"type":"text","text":" dependency will be cached. Since the cached object will be returned from now on any arguments passed in"},{"text":" ","type":"text"},{"text":"later requests will be ignored until the factory or scope is reset.","type":"text"}],"type":"paragraph"}]}],"metadata":{"symbolKind":"struct","role":"symbol","modules":[{"name":"Factory"}],"navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"title":"ParameterFactory","roleHeading":"Structure","externalID":"s:7Factory09ParameterA0V","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ParameterFactory"}]},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","doc:\/\/Factory\/s8SendableP"]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"references":{"doc://Factory/documentation/Factory/ParameterFactory/registration":{"role":"symbol","abstract":[{"type":"text","text":"Required registration"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/registration","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"registration","kind":"identifier"},{"text":": ","kind":"text"},{"text":"FactoryRegistration","kind":"typeIdentifier","preciseIdentifier":"s:7Factory0A12RegistrationV"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"url":"\/documentation\/factory\/parameterfactory\/registration","title":"registration"},"doc://Factory/documentation/Factory/ParameterFactory/callAsFunction(_:)":{"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"callAsFunction","kind":"identifier"},{"kind":"text","text":"("},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","kind":"symbol","title":"callAsFunction(_:)","url":"\/documentation\/factory\/parameterfactory\/callasfunction(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/callAsFunction(_:)","abstract":[{"type":"text","text":"Resolves a factory capable of taking parameters at runtime."}]},"doc://Factory/documentation/Factory/FactoryModifying":{"title":"FactoryModifying","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/FactoryModifying","navigatorTitle":[{"text":"FactoryModifying","kind":"identifier"}],"url":"\/documentation\/factory\/factorymodifying","role":"symbol","abstract":[{"text":"Public protocol with functionality common to all Factory’s. Used to add scope and decorator modifiers to Factory.","type":"text"}],"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FactoryModifying","kind":"identifier"}]},"doc://Factory/documentation/Factory/ParameterFactory/FactoryModifying-Implementations":{"url":"\/documentation\/factory\/parameterfactory\/factorymodifying-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/FactoryModifying-Implementations","title":"FactoryModifying Implementations","abstract":[]},"doc://Factory/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/Factory\/s8SendableP","title":"Swift.Sendable"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory/init(_:key:_:)":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/init(_:key:_:)","role":"symbol","title":"init(_:key:_:)","abstract":[{"type":"text","text":"Public initializer creates a factory capable of taking parameters at runtime."}],"fragments":[{"kind":"identifier","text":"init"},{"text":"(any ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory16ManagedContainerP","text":"ManagedContainer"},{"kind":"text","text":", "},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"P"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"url":"\/documentation\/factory\/parameterfactory\/init(_:key:_:)","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/ParameterFactory/resolve(_:)":{"title":"resolve(_:)","role":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/resolve(_:)","kind":"symbol","url":"\/documentation\/factory\/parameterfactory\/resolve(_:)","abstract":[{"text":"Unsugared resolution function.","type":"text"}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolve","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]},"doc://Factory/documentation/Factory/ParameterFactory":{"url":"\/documentation\/factory\/parameterfactory","role":"symbol","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParameterFactory","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory","title":"ParameterFactory","navigatorTitle":[{"text":"ParameterFactory","kind":"identifier"}],"abstract":[{"text":"Factory capable of taking parameters at runtime","type":"text"}]},"doc://Factory/documentation/Factory/ParameterFactory/register(factory:)":{"title":"register(factory:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/ParameterFactory\/register(factory:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"register","kind":"identifier"},{"text":"(","kind":"text"},{"text":"factory","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"P"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"text":"ParameterFactory","kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"P"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":">","kind":"text"}],"type":"topic","url":"\/documentation\/factory\/parameterfactory\/register(factory:)","abstract":[{"type":"text","text":"Registers a new factory capable of taking parameters at runtime."}],"role":"symbol"}}}