{"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Container"]]},"sections":[],"kind":"article","topicSections":[{"generated":true,"identifiers":["doc:\/\/Factory\/documentation\/Factory\/Container\/callAsFunction(key:_:)-33sw2","doc:\/\/Factory\/documentation\/Factory\/Container\/callAsFunction(key:_:)-9b7qn","doc:\/\/Factory\/documentation\/Factory\/Container\/decorator(_:)","doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d","doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-7g95","doc:\/\/Factory\/documentation\/Factory\/Container\/reset(options:)","doc:\/\/Factory\/documentation\/Factory\/Container\/with(_:)"],"title":"Instance Methods"}],"metadata":{"roleHeading":"API Collection","role":"collectionGroup","modules":[{"name":"Factory"}],"title":"ManagedContainer Implementations"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Container\/ManagedContainer-Implementations"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/container\/managedcontainer-implementations"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://Factory/documentation/Factory/Container":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","type":"topic","title":"Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"url":"\/documentation\/factory\/container","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Container"}],"navigatorTitle":[{"text":"Container","kind":"identifier"}]},"doc://Factory/documentation/Factory/Container/reset(options:)":{"role":"symbol","abstract":[{"text":"Defines a thread safe access mechanism to reset the container.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"reset","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"options"},{"text":": ","kind":"text"},{"text":"FactoryResetOptions","preciseIdentifier":"s:7Factory0A12ResetOptionsO","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/reset(options:)","title":"reset(options:)","url":"\/documentation\/factory\/container\/reset(options:)"},"doc://Factory/documentation/Factory/Container/callAsFunction(key:_:)-9b7qn":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"callAsFunction"},{"text":"<","kind":"text"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", (","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","title":"callAsFunction(key:_:)","url":"\/documentation\/factory\/container\/callasfunction(key:_:)-9b7qn","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/callAsFunction(key:_:)-9b7qn","role":"symbol","abstract":[{"type":"text","text":"Syntactic sugar allows container to create a properly bound ParameterFactory."}]},"doc://Factory/documentation/Factory/Container/with(_:)":{"title":"with(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/with(_:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"with"},{"kind":"text","text":"(("},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"url":"\/documentation\/factory\/container\/with(_:)","abstract":[{"text":"Defines a with function to allow container transformation on assignment.","type":"text"}],"kind":"symbol"},"doc://Factory/documentation/Factory/Container/callAsFunction(key:_:)-33sw2":{"abstract":[{"text":"Syntactic sugar allows container to create a properly bound Factory.","type":"text"}],"title":"callAsFunction(key:_:)","type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/callAsFunction(key:_:)-33sw2","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"callAsFunction","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", () -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7FactoryAAV","text":"Factory","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/factory\/container\/callasfunction(key:_:)-33sw2","kind":"symbol"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Container/promised(key:)-6682d":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"?>","kind":"text"}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d","abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"role":"symbol","url":"\/documentation\/factory\/container\/promised(key:)-6682d","kind":"symbol","title":"promised(key:)"},"doc://Factory/documentation/Factory/Container/promised(key:)-7g95":{"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a parameter factory whose optional registration is promised before resolution."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Factory09ParameterA0V","text":"ParameterFactory"},{"kind":"text","text":"<"},{"text":"P","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-7g95","title":"promised(key:)","url":"\/documentation\/factory\/container\/promised(key:)-7g95","type":"topic","kind":"symbol"},"doc://Factory/documentation/Factory/Container/decorator(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decorator"},{"text":"(((","kind":"text"},{"kind":"keyword","text":"Any"},{"text":") -> ())?)","kind":"text"}],"kind":"symbol","type":"topic","title":"decorator(_:)","url":"\/documentation\/factory\/container\/decorator(_:)","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/decorator(_:)","role":"symbol","abstract":[{"text":"Defines a decorator for the container. This decorator will see every dependency resolved by this container.","type":"text"}]}}}