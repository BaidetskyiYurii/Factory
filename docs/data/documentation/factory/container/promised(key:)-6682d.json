{"kind":"symbol","schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d","interfaceLanguage":"swift"},"metadata":{"title":"promised(key:)","externalID":"s:7Factory16ManagedContainerPAAE8promised3keyA2AVyqd__SgGs12StaticStringV_tlF::SYNTHESIZED::s:7Factory9ContainerC","extendedModule":"Factory","roleHeading":"Instance Method","role":"symbol","modules":[{"name":"Factory"}],"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Factory","preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}]},"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/Container\/ManagedContainer-Implementations"]]},"abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/container\/promised(key:)-6682d"]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#function"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"code":["extension Container {","    public var accountLoader: Factory<AccountLoading?> { promised() }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"When run in debug mode and the application attempts to resolve an unregistered accountLoader, ","type":"text"},{"code":"promised()","type":"codeVoice"},{"text":" will trigger a fatalError to","type":"text"},{"type":"text","text":" "},{"text":"inform you of the mistake. But in a released application, ","type":"text"},{"type":"codeVoice","code":"promised()"},{"type":"text","text":" simply returns nil and your application can continue on."}]}],"kind":"content"}],"sections":[],"references":{"doc://Factory/documentation/Factory/Container/ManagedContainer-Implementations":{"kind":"article","abstract":[],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/ManagedContainer-Implementations","url":"\/documentation\/factory\/container\/managedcontainer-implementations","type":"topic","role":"collectionGroup","title":"ManagedContainer Implementations"},"doc://Factory/documentation/Factory/Container/promised(key:)-6682d":{"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution."}],"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d","url":"\/documentation\/factory\/container\/promised(key:)-6682d","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"promised"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":") -> "},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"title":"promised(key:)","role":"symbol","kind":"symbol"},"doc://Factory/documentation/Factory/Container":{"url":"\/documentation\/factory\/container","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Container","kind":"identifier"}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"type":"text","text":"This is the default Container provided for your convenience by Factory."}],"navigatorTitle":[{"kind":"identifier","text":"Container"}],"title":"Container","kind":"symbol","type":"topic","role":"symbol"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/Factory":{"kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","role":"symbol","navigatorTitle":[{"text":"Factory","kind":"identifier"}],"type":"topic","title":"Factory","url":"\/documentation\/factory\/factory","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Factory"}]}}}