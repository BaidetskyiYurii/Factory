{"variants":[{"paths":["\/documentation\/factory\/container\/promised(key:)-6682d"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory","doc:\/\/Factory\/documentation\/Factory\/Container","doc:\/\/Factory\/documentation\/Factory\/Container\/ManagedContainer-Implementations"]]},"abstract":[{"type":"text","text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"key","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":" = ","kind":"text"},{"text":"#function","kind":"keyword"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7FactoryAAV","kind":"typeIdentifier","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory","text":"Factory"},{"text":"<","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"codeListing","syntax":"swift","code":["extension Container {","    public var accountLoader: Factory<AccountLoading?> { promised() }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When run in debug mode and the application attempts to resolve an unregistered accountLoader, "},{"code":"promised()","type":"codeVoice"},{"text":" will trigger a fatalError to","type":"text"},{"type":"text","text":" "},{"text":"inform you of the mistake. But in a released application, ","type":"text"},{"type":"codeVoice","code":"promised()"},{"text":" simply returns nil and your application can continue on.","type":"text"}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d"},"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","sections":[],"metadata":{"modules":[{"name":"Factory"}],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"promised"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"key"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV","text":"Factory"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?>"}],"title":"promised(key:)","role":"symbol","extendedModule":"Factory","roleHeading":"Instance Method","externalID":"s:7Factory16ManagedContainerPAAE8promised3keyA2AVyqd__SgGs12StaticStringV_tlF::SYNTHESIZED::s:7Factory9ContainerC","symbolKind":"method"},"references":{"doc://Factory/documentation/Factory/Container/promised(key:)-6682d":{"type":"topic","kind":"symbol","abstract":[{"text":"Syntactic sugar allows container to create a factory whose optional registration is promised before resolution.","type":"text"}],"title":"promised(key:)","url":"\/documentation\/factory\/container\/promised(key:)-6682d","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/promised(key:)-6682d","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"promised","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":") -> ","kind":"text"},{"text":"Factory","kind":"typeIdentifier","preciseIdentifier":"s:7FactoryAAV"},{"kind":"text","text":"<"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":"?>"}]},"doc://Factory/documentation/Factory/Container":{"kind":"symbol","navigatorTitle":[{"text":"Container","kind":"identifier"}],"title":"Container","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container","abstract":[{"text":"This is the default Container provided for your convenience by Factory.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Container"}],"url":"\/documentation\/factory\/container"},"doc://Factory/documentation/Factory":{"kind":"symbol","title":"Factory","identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","abstract":[{"type":"text","text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI."}],"role":"collection","type":"topic"},"doc://Factory/documentation/Factory/Container/ManagedContainer-Implementations":{"abstract":[],"type":"topic","kind":"article","title":"ManagedContainer Implementations","identifier":"doc:\/\/Factory\/documentation\/Factory\/Container\/ManagedContainer-Implementations","role":"collectionGroup","url":"\/documentation\/factory\/container\/managedcontainer-implementations"},"doc://Factory/documentation/Factory/Factory":{"role":"symbol","abstract":[{"text":"A Factory manages the dependency injection process for a specific object or service.","type":"text"}],"url":"\/documentation\/factory\/factory","navigatorTitle":[{"kind":"identifier","text":"Factory"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Factory","kind":"identifier"}],"title":"Factory","kind":"symbol","identifier":"doc:\/\/Factory\/documentation\/Factory\/Factory"}}}