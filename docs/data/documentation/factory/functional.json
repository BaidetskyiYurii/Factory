{"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Functional","interfaceLanguage":"swift"},"metadata":{"role":"article","title":"Functional Injection","roleHeading":"Article","modules":[{"name":"Factory"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"abstract":[{"text":"Factory can inject more than service classes and structs.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"seeAlsoSections":[{"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"],"generated":true}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","anchor":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing."}],"type":"paragraph"},{"anchor":"Example","level":2,"type":"heading","text":"Example"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}]},{"code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct."}]},{"type":"paragraph","inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"]},{"anchor":"Testing","level":2,"type":"heading","text":"Testing"},{"inlineContent":[{"text":"Now consider how easy it is to write a test with mock accounts…","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Or test edge cases like no accounts found.","type":"text"}],"type":"paragraph"},{"code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Or test specific error cases.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an article that goes into the technique in more detail: "},{"isActive":true,"type":"reference","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05"}]}],"kind":"content"}],"kind":"article","references":{"doc://Factory/documentation/Factory/Modules":{"kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","title":"Modular Development","role":"article","url":"\/documentation\/factory\/modules","abstract":[{"type":"text","text":"Using Factory in a project with multiple modules."}],"type":"topic"},"doc://Factory/documentation/Factory/Tags":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/tags","abstract":[{"type":"text","text":"Obtaining a list of dependencies of a given type."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","title":"Tags"},"doc://Factory/documentation/Factory/Design":{"type":"topic","kind":"article","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","url":"\/documentation\/factory\/design","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"title":"Designing Factory","role":"article"},"doc://Factory/documentation/Factory/Modifiers":{"abstract":[{"type":"text","text":"Considerations when defining and redefining a Factory’s behavior."}],"type":"topic","kind":"article","role":"article","url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers"},"doc://Factory/documentation/Factory":{"role":"collection","type":"topic","abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"identifier":"doc:\/\/Factory\/documentation\/Factory","url":"\/documentation\/factory","title":"Factory","kind":"symbol"},"doc://Factory/documentation/Factory/Optionals":{"role":"article","type":"topic","kind":"article","url":"\/documentation\/factory\/optionals","abstract":[{"type":"text","text":"With Factory registrations can be performed at any time."}],"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","title":"Optionals and Dynamic Registration"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection","url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","type":"link","titleInlineContent":[{"text":"Factory and Functional Dependency Injection","type":"text"}]},"doc://Factory/documentation/Factory/Cycle":{"role":"article","abstract":[{"type":"text","text":"What’s a resolution cycle, and why should we care?"}],"title":"Resolution Cycles","type":"topic","url":"\/documentation\/factory\/cycle","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article"}}}