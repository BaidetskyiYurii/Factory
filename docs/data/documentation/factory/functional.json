{"abstract":[{"type":"text","text":"Factory can inject more than service classes and structs."}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"text":"Functional Injection is a powerful tool that can, in many cases, eliminate the need for defining protocols, implementations, and the various stubs and mocks one needs when doing traditional Protocol-Oriented-Programing.","type":"text"}],"type":"paragraph"},{"text":"Example","type":"heading","anchor":"Example","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Consider the following typealias and Factory."}]},{"syntax":"swift","code":["typealias AccountProviding = () async throws -> [Account]","","extension Container {","    var accountProvider: Factory<AccountProviding> {","        self {{ try await Network.get(path: \"\/accounts\") }}","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Note the double braces. In this example our factory closure is returning a closure, not a class or struct.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Now, here’s the view model that uses it.","type":"text"}],"type":"paragraph"},{"code":["class AccountViewModel: ObservableObject {","    @Injected(\\.accountProvider) var accountProvider","    @Published var accounts: [Account] = []","    @MainActor func load() async {","        do {","            accounts = try await accountProvider()","        } catch {","            print(error)","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"level":2,"text":"Testing","type":"heading","anchor":"Testing"},{"inlineContent":[{"text":"Now consider how easy it is to write a test with mock accounts…","type":"text"}],"type":"paragraph"},{"code":["func testAllAccounts() async {","    Container.shared.accountProvider.register {{ Account.mockAccounts }}","    do {","        let viewModel = AccountViewModel()","        try await viewModel.load()","        XCTAssert(viewModel.accounts.count == 5)","    } catch {","        XCTFail(\"Account load failed\")","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or test edge cases like no accounts found."}],"type":"paragraph"},{"syntax":"swift","code":["func testEmptyAccounts() async {","    Container.shared.accountProvider.register {{ [] }}","    ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Or test specific error cases.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func testErrorLoadingAccounts() async {","    Container.shared.accountProvider.register {{ throw APIError.network }}","    ...","}"]},{"inlineContent":[{"text":"Here’s an article that goes into the technique in more detail: ","type":"text"},{"type":"reference","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","isActive":true}],"type":"paragraph"}]}],"metadata":{"title":"Functional Injection","modules":[{"name":"Factory"}],"roleHeading":"Article","role":"article"},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/factory\/functional"]}],"identifier":{"url":"doc:\/\/Factory\/documentation\/Factory\/Functional","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Advanced Topics","identifiers":["doc:\/\/Factory\/documentation\/Factory\/Design","doc:\/\/Factory\/documentation\/Factory\/Modifiers","doc:\/\/Factory\/documentation\/Factory\/Modules","doc:\/\/Factory\/documentation\/Factory\/Cycle","doc:\/\/Factory\/documentation\/Factory\/Optionals","doc:\/\/Factory\/documentation\/Factory\/Tags"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/Factory\/documentation\/Factory"]]},"kind":"article","references":{"doc://Factory/documentation/Factory/Modifiers":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modifiers","kind":"article","role":"article","abstract":[{"text":"Considerations when defining and redefining a Factory’s behavior.","type":"text"}],"url":"\/documentation\/factory\/modifiers","title":"Factory Modifiers","type":"topic"},"doc://Factory/documentation/Factory/Optionals":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Optionals","type":"topic","kind":"article","abstract":[{"text":"With Factory registrations can be performed at any time.","type":"text"}],"title":"Optionals and Dynamic Registration","url":"\/documentation\/factory\/optionals","role":"article"},"doc://Factory/documentation/Factory/Cycle":{"type":"topic","identifier":"doc:\/\/Factory\/documentation\/Factory\/Cycle","kind":"article","abstract":[{"text":"What’s a resolution cycle, and why should we care?","type":"text"}],"role":"article","title":"Resolution Cycles","url":"\/documentation\/factory\/cycle"},"doc://Factory/documentation/Factory/Modules":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Modules","kind":"article","role":"article","abstract":[{"text":"Using Factory in a project with multiple modules.","type":"text"}],"url":"\/documentation\/factory\/modules","title":"Modular Development","type":"topic"},"https://betterprogramming.pub/factory-and-functional-dependency-injection-2d0a38042d05":{"url":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","title":"Factory and Functional Dependency Injection","type":"link","identifier":"https:\/\/betterprogramming.pub\/factory-and-functional-dependency-injection-2d0a38042d05","titleInlineContent":[{"text":"Factory and Functional Dependency Injection","type":"text"}]},"doc://Factory/documentation/Factory/Tags":{"identifier":"doc:\/\/Factory\/documentation\/Factory\/Tags","kind":"article","role":"article","abstract":[{"text":"Obtaining a list of dependencies of a given type.","type":"text"}],"url":"\/documentation\/factory\/tags","title":"Tags","type":"topic"},"doc://Factory/documentation/Factory/Design":{"url":"\/documentation\/factory\/design","title":"Designing Factory","identifier":"doc:\/\/Factory\/documentation\/Factory\/Design","kind":"article","role":"article","abstract":[{"text":"Rationale behind the design decisions made in Factory 1.0 and 2.0","type":"text"}],"type":"topic"},"doc://Factory/documentation/Factory":{"abstract":[{"text":"A new approach to Container-Based Dependency Injection for Swift and SwiftUI.","type":"text"}],"role":"collection","identifier":"doc:\/\/Factory\/documentation\/Factory","title":"Factory","url":"\/documentation\/factory","type":"topic","kind":"symbol"}}}